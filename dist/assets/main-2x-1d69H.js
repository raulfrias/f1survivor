const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./league-dashboard-BGSKMJy6.js","./league-dashboard-CBfSAJeM.css","./dashboard-utils-CP5FU_16.js","./race-results-api-BOSDOCeH.js"])))=>i.map(i=>d[i]);
import{g as ne,F as se,_ as g,a as D,s as K,l as T,b as V,i as oe,c as y,d as z}from"./league-dashboard-BGSKMJy6.js";class re{constructor(){this.states={COUNTDOWN:"countdown",RACE_LIVE:"race_live",POST_RACE:"post_race",NEXT_RACE:"next_race"},this.POST_RACE_DURATION=10*60*60*1e3}getCurrentState(e){if(!e||!e.raceDate)return this.states.COUNTDOWN;const t=new Date,a=new Date(e.raceDate),i=new Date(a.getTime()+this.POST_RACE_DURATION);if(t<a)return this.states.COUNTDOWN;if(t<i){const n=new Date(a.getTime()+72e5);return t<n?this.states.RACE_LIVE:this.states.POST_RACE}else return this.states.NEXT_RACE}getStateDisplay(e,t){switch(e){case this.states.RACE_LIVE:return"RACE IN PROGRESS";case this.states.POST_RACE:return"RACE FINISHED - Results Pending";case this.states.NEXT_RACE:return"Loading Next Race...";default:return t||""}}}class ce{constructor(e){this.containerEl=e,this.currentRaceData=null,this.countdownInterval=null,this.stateManager=new re}async initialize(){this.countdownInterval&&(clearInterval(this.countdownInterval),this.countdownInterval=null);try{if(await this.fetchNextRaceData(),!this.currentRaceData||!this.currentRaceData.raceId)throw new Error("Failed to load race data");return this.renderCountdown(),this.startCountdown(),window.addEventListener("storage",e=>{e.key==="nextRaceData"&&(console.log("Race data changed in localStorage, reinitializing..."),this.initialize())}),window.addEventListener("raceDataUpdated",()=>{console.log("Race data updated event received, reinitializing..."),this.initialize()}),this.currentRaceData}catch(e){throw console.error("Failed to initialize race countdown:",e),e}}async fetchNextRaceData(){try{const e=localStorage.getItem("nextRaceData");if(e){console.log("Found race data in localStorage:",JSON.parse(e)),this.currentRaceData=JSON.parse(e);return}console.log("No cached data found, checking for current race...");const t=this.getCurrentRace();if(t){console.log("Found current race in progress:",t.raceName);const i={raceId:t.id,meetingKey:t.round,raceName:t.raceName,raceDate:t.dateStart,qualifyingDate:this.calculateQualifyingDate(t.dateStart),raceCircuit:t.circuit,location:t.location,country:t.country,pickDeadline:t.dateStart};this.currentRaceData=i,localStorage.setItem("nextRaceData",JSON.stringify(i)),console.log("Current race data prepared and cached:",i);return}console.log("No current race found, fetching next race from calendar...");const a=ne();if(a){console.log("Found next race from calendar:",a.raceName);const i={raceId:a.id,meetingKey:a.round,raceName:a.raceName,raceDate:a.dateStart,qualifyingDate:this.calculateQualifyingDate(a.dateStart),raceCircuit:a.circuit,location:a.location,country:a.country,pickDeadline:a.dateStart};this.currentRaceData=i,localStorage.setItem("nextRaceData",JSON.stringify(i)),console.log("Race data prepared and cached:",i)}else console.log("No upcoming races found, loading fallback..."),this.loadFallbackRaceData()}catch(e){console.error("Error fetching race data:",e),this.loadFallbackRaceData()}}loadFallbackRaceData(){console.log("Loading fallback race data...");const e={raceId:"mon-2025",meetingKey:8,raceName:"Monaco GP",raceDate:"2025-05-25T13:00:00+00:00",qualifyingDate:"2025-05-25",raceCircuit:"Monaco",location:"Monaco",country:"Monaco",pickDeadline:"2025-05-25T12:00:00.000Z"};this.currentRaceData=e,localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("nextRaceDataTimestamp",Date.now().toString()),console.log("Fallback data loaded:",e)}renderCountdown(){if(!this.currentRaceData)return;const e=this.getCurrentRaceState(),t=e===this.stateManager.states.RACE_LIVE||e===this.stateManager.states.POST_RACE?"Race: ":"Next Race: ";this.containerEl.innerHTML=`
      <div class="race-info">
        <h3 class="race-name">${t}<span id="race-name">${this.currentRaceData.raceName}</span></h3>
      </div>
      <div class="countdown-timer">
        <div class="time-unit">
          <span id="days-value">00</span>
          <label>Days</label>
        </div>
        <div class="time-unit">
          <span id="hours-value">00</span>
          <label>Hours</label>
        </div>
        <div class="time-unit">
          <span id="minutes-value">00</span>
          <label>Minutes</label>
        </div>
        <div class="time-unit">
          <span id="seconds-value">00</span>
          <label>Seconds</label>
        </div>
      </div>
      <div class="pick-status" id="pick-status"></div>
    `}startCountdown(){this.currentRaceData&&(this.updateCountdown(),this.countdownInterval=setInterval(()=>{this.updateCountdown()},1e3))}isRaceInProgress(){if(!this.currentRaceData||!this.currentRaceData.raceDate)return!1;const e=new Date,t=new Date(this.currentRaceData.raceDate),a=new Date(t.getTime()+3*60*60*1e3);return e>=t&&e<=a}getCurrentRaceState(){return this.stateManager.getCurrentState(this.currentRaceData)}getCurrentRace(){const e=new Date,t=10*60*60*1e3;for(const a of se){const i=new Date(a.dateStart),n=new Date(i.getTime()+t);if(e>=i&&e<=n)return console.log(`Found current race: ${a.raceName} (${a.dateStart})`),a}return console.log("No current race found"),null}updateCountdown(){const e=this.getCurrentRaceState();if(e===this.stateManager.states.RACE_LIVE||e===this.stateManager.states.POST_RACE){document.getElementById("days-value").textContent="00",document.getElementById("hours-value").textContent="00",document.getElementById("minutes-value").textContent="00",document.getElementById("seconds-value").textContent="00";const t=document.getElementById("pick-status");t.textContent=this.stateManager.getStateDisplay(e),t.className=`pick-status ${e}`;const a=document.getElementById("make-pick-btn");a&&(a.disabled=!0,a.style.opacity="0.5",a.style.cursor="not-allowed")}else e===this.stateManager.states.NEXT_RACE?this.loadNextRace():(this.updateCountdownDisplay(),this.updatePickDeadlineStatus())}updateCountdownDisplay(){if(this.isRaceInProgress()){document.getElementById("days-value").textContent="00",document.getElementById("hours-value").textContent="00",document.getElementById("minutes-value").textContent="00",document.getElementById("seconds-value").textContent="00";const s=document.getElementById("pick-status");s.textContent="RACE IN PROGRESS",s.className="pick-status race-live";const r=document.getElementById("make-pick-btn");r&&(r.disabled=!0,r.style.opacity="0.5",r.style.cursor="not-allowed");return}const e=this.calculateTimeRemaining();document.getElementById("days-value").textContent=e.days.toString().padStart(2,"0"),document.getElementById("hours-value").textContent=e.hours.toString().padStart(2,"0"),document.getElementById("minutes-value").textContent=e.minutes.toString().padStart(2,"0"),document.getElementById("seconds-value").textContent=e.seconds.toString().padStart(2,"0");const t=new Date(this.currentRaceData.pickDeadline).getTime(),a=new Date().getTime(),i=t-a,n=document.getElementById("pick-status");i<=0?(n.textContent="Selection locked: Deadline has passed",n.className="pick-status deadline-passed"):i<=36e5?(n.textContent="Pick deadline approaching!",n.className="pick-status deadline-warning"):(n.textContent="",n.className="pick-status")}updatePickDeadlineStatus(){}loadNextRace(){}calculateTimeRemaining(){const e=new Date(this.currentRaceData.raceDate).getTime(),t=new Date().getTime(),a=e-t;return a<=0?{total:0,days:0,hours:0,minutes:0,seconds:0}:{total:a,days:Math.floor(a/(1e3*60*60*24)),hours:Math.floor(a%(1e3*60*60*24)/(1e3*60*60)),minutes:Math.floor(a%(1e3*60*60)/(1e3*60)),seconds:Math.floor(a%(1e3*60)/1e3)}}calculateQualifyingDate(e){const t=new Date(e);return new Date(t.getTime()-24*60*60*1e3).toISOString().split("T")[0]}destroy(){this.countdownInterval&&clearInterval(this.countdownInterval)}}const S={nextRaceData:{raceId:"monaco-2025",raceName:"Monaco Grand Prix 2025",qualifyingDate:"2025-05-25",pickDeadline:"2025-05-26T12:00:00Z",raceCircuit:"Circuit de Monaco"},qualifyingResults:{raceId:"monaco-2025",results:[{driverId:1,full_name:"Max Verstappen",position:1,team_name:"Red Bull Racing"},{driverId:16,full_name:"Charles Leclerc",position:2,team_name:"Ferrari"},{driverId:55,full_name:"Carlos Sainz",position:3,team_name:"Ferrari"},{driverId:11,full_name:"Sergio Perez",position:4,team_name:"Red Bull Racing"},{driverId:44,full_name:"Lewis Hamilton",position:5,team_name:"Mercedes"},{driverId:63,full_name:"George Russell",position:6,team_name:"Mercedes"},{driverId:81,full_name:"Oscar Piastri",position:7,team_name:"McLaren"},{driverId:4,full_name:"Lando Norris",position:8,team_name:"McLaren"},{driverId:14,full_name:"Fernando Alonso",position:9,team_name:"Aston Martin"},{driverId:18,full_name:"Lance Stroll",position:10,team_name:"Aston Martin"},{driverId:23,full_name:"Alex Albon",position:11,team_name:"Williams"},{driverId:3,full_name:"Daniel Ricciardo",position:12,team_name:"Racing Bulls"},{driverId:22,full_name:"Yuki Tsunoda",position:13,team_name:"Racing Bulls"},{driverId:77,full_name:"Valtteri Bottas",position:14,team_name:"Kick Sauber"},{driverId:27,full_name:"Nico Hulkenberg",position:15,team_name:"Kick Sauber"},{driverId:31,full_name:"Esteban Ocon",position:16,team_name:"Alpine"},{driverId:10,full_name:"Pierre Gasly",position:17,team_name:"Alpine"},{driverId:2,full_name:"Logan Sargeant",position:18,team_name:"Williams"},{driverId:20,full_name:"Kevin Magnussen",position:19,team_name:"Haas F1 Team"},{driverId:24,full_name:"Zhou Guanyu",position:20,team_name:"Haas F1 Team"}],timestamp:new Date().toISOString()}},le={simulateQualiDone(){localStorage.clear();const o=new Date,e={...S.nextRaceData,qualifyingDate:new Date(o.getTime()-2*60*60*1e3).toISOString(),pickDeadline:new Date(o.getTime()+10*60*60*1e3).toISOString(),raceDate:new Date(o.getTime()+24*60*60*1e3).toISOString()};localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("qualifyingResults",JSON.stringify(S.qualifyingResults)),console.log("✓ Test Case 1: Post-Qualifying State (Pre-Deadline)"),console.log("- Qualifying completed 2 hours ago"),console.log("- Pick deadline is 10 hours from now"),console.log("- Race starts in 24 hours"),console.log("- P15 (Hulkenberg) should be available"),console.log("- Pick button should be enabled"),window.location.reload()},simulateSomePicks(){localStorage.clear();const o=new Date,e={...S.nextRaceData,raceName:"Monaco Grand Prix 2025",qualifyingDate:new Date(o.getTime()-24*60*60*1e3).toISOString(),pickDeadline:new Date(o.getTime()-2*60*60*1e3).toISOString(),raceDate:new Date(o.getTime()-30*60*1e3).toISOString()};localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("qualifyingResults",JSON.stringify(S.qualifyingResults)),localStorage.setItem("f1survivor_user_picks",JSON.stringify({userId:"test-user",currentSeason:"2025",picks:[{driverId:27},{driverId:31}]})),console.log("✓ Test Case 2: Race In Progress"),console.log("- Race started 30 minutes ago"),console.log("- Timer should show zeros"),console.log('- Status should show "RACE IN PROGRESS"'),console.log("- P15 (Hulkenberg) and P16 (Ocon) already picked"),console.log("- Auto-picked P17 (Gasly)"),console.log("- Pick button should be disabled"),window.location.reload()},simulateDeadlinePassed(){const o={...S.nextRaceData,pickDeadline:new Date(Date.now()-1e3).toISOString()};localStorage.clear(),localStorage.setItem("nextRaceData",JSON.stringify(o)),localStorage.setItem("qualifyingResults",JSON.stringify(S.qualifyingResults)),console.log("✓ Test Case 3: Deadline Passed"),console.log("- Pick deadline has passed"),console.log("- Pick button should be disabled"),console.log("- Should show deadline passed message"),window.location.reload()},reset(){localStorage.clear(),console.log("✓ Reset: Cleared all test data"),console.log("- App should return to default pre-qualifying state"),window.location.reload()}};(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")&&document.addEventListener("DOMContentLoaded",()=>{});(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")&&(window.TestScenarios=le,window.mockMonacoData=S);class de{constructor(){this.testResults=[],console.log("🧪 Post-Race Test Suite Initialized"),console.log("🏁 Testing Spanish GP → Canadian GP Transition")}async runAllTests(){console.log(`
========== POST-RACE TESTING SUITE ==========`);try{await this.testRaceResultsAPI(),await this.testSurvivalCalculations(),await this.testRaceTransitions(),await this.testSystemReset(),this.printTestSummary()}catch(e){console.error("❌ Test suite failed:",e)}}async testRaceResultsAPI(){console.log(`
🔍 TEST 1: OpenF1 API Race Results Availability`);try{const{fetchRaceResults:e,calculateSurvivalStatus:t}=await g(async()=>{const{fetchRaceResults:n,calculateSurvivalStatus:s}=await import("./race-results-api-BOSDOCeH.js");return{fetchRaceResults:n,calculateSurvivalStatus:s}},[],import.meta.url);console.log("  📡 Testing mock race results...");const i=await e("esp-2025-race");if(i&&i.positions)console.log(`  ✅ Mock race results fetched: ${i.positions.length} drivers`),console.log(`  🏆 Winner: ${i.positions[0].full_name}`),console.log(`  📊 P15: ${i.positions[14].full_name}`),console.log(`  📊 P16: ${i.positions[15].full_name}`),this.testResults.push({test:"Race Results API - Mock",status:"PASS"});else throw new Error("Failed to fetch mock race results");console.log("  📡 Testing real OpenF1 race results API...");try{const s=await(await fetch("https://api.openf1.org/v1/sessions?session_name=Race&year=2025")).json();if(console.log(`  📊 Found ${s.length} race sessions in 2025`),s.length>0){const r=s[s.length-1];console.log(`  🏁 Latest race session: ${r.location} (${r.session_key})`),this.testResults.push({test:"Race Results API - Real",status:"PASS"})}else console.log("  ⚠️  No race sessions found yet (expected during live race)"),this.testResults.push({test:"Race Results API - Real",status:"SKIP"})}catch(n){console.log("  ⚠️  OpenF1 API error (expected during live race):",n.message),this.testResults.push({test:"Race Results API - Real",status:"SKIP"})}}catch(e){console.error("  ❌ Race Results API test failed:",e),this.testResults.push({test:"Race Results API",status:"FAIL"})}}async testSurvivalCalculations(){console.log(`
🧮 TEST 2: Survival Calculation Logic`);try{const{calculateSurvivalStatus:e,isPlayerAlive:t,calculateSurvivalRate:a,getPicksWithResults:i}=await g(async()=>{const{calculateSurvivalStatus:m,isPlayerAlive:L,calculateSurvivalRate:ae,getPicksWithResults:ie}=await import("./race-results-api-BOSDOCeH.js");return{calculateSurvivalStatus:m,isPlayerAlive:L,calculateSurvivalRate:ae,getPicksWithResults:ie}},[],import.meta.url),n=[{raceId:"esp-2025",raceName:"Spanish GP",driverId:55,driverName:"Carlos Sainz",pickDate:"2025-06-01T12:00:00.000Z"}],s={session_key:"esp-2025-race",session_name:"Race",location:"Barcelona",positions:[{position:1,driver_number:1,full_name:"Max Verstappen",team_name:"Red Bull Racing"},{position:2,driver_number:4,full_name:"Lando Norris",team_name:"McLaren"},{position:3,driver_number:16,full_name:"Charles Leclerc",team_name:"Ferrari"},{position:15,driver_number:55,full_name:"Carlos Sainz",team_name:"Williams"},{position:16,driver_number:23,full_name:"Alexander Albon",team_name:"Williams"}]},r=n[0],c=e(r,s);if(console.log(`  🎯 User picked: ${r.driverName} (#${r.driverId})`),console.log(`  🏁 Race result: ${c.position} - ${c.status}`),c.status==="ELIMINATED"&&c.position==="P15")console.log("  ✅ Survival calculation correct: P15 = ELIMINATED"),this.testResults.push({test:"Survival Calculation",status:"PASS"});else throw new Error(`Unexpected survival status: ${c.status}`);console.log("  📊 Testing multiple picks scenario...");const l=[{raceId:"bhr-2025",driverId:4,survivalStatus:{status:"SURVIVED",position:"P2"}},{raceId:"sau-2025",driverId:27,survivalStatus:{status:"SURVIVED",position:"P10"}},{raceId:"esp-2025",driverId:55,survivalStatus:{status:"ELIMINATED",position:"P15"}}],d=t(l),u=a(l);if(console.log(`  👤 Player status: ${d?"ALIVE":"ELIMINATED"}`),console.log(`  📈 Survival rate: ${u}%`),!d&&u===67)console.log("  ✅ Multi-pick survival calculation correct"),this.testResults.push({test:"Multi-Pick Survival",status:"PASS"});else throw new Error(`Unexpected multi-pick results: alive=${d}, rate=${u}`)}catch(e){console.error("  ❌ Survival calculation test failed:",e),this.testResults.push({test:"Survival Calculation",status:"FAIL"})}}async testRaceTransitions(){console.log(`
🔄 TEST 3: Race Transition Logic`);try{console.log("  ⏰ Simulating post-race state transition...");const e=localStorage.getItem("nextRaceData"),t=localStorage.getItem("qualifyingResults"),a=new Date("2025-06-01T23:00:00+00:00"),i=new Date(a.getTime()+1e3),n=Date.now;Date.now=()=>i.getTime(),console.log(`  📅 Simulated time: ${i.toISOString()}`),console.log("  🔄 Testing race transition...");const{getNextRace:s,F1_2025_CALENDAR:r}=await g(async()=>{const{getNextRace:l,F1_2025_CALENDAR:d}=await import("./league-dashboard-BGSKMJy6.js").then(u=>u.r);return{getNextRace:l,F1_2025_CALENDAR:d}},__vite__mapDeps([0,1]),import.meta.url),c=s(i);if(c&&c.raceName==="Canadian GP")console.log(`  ✅ Next race correctly identified: ${c.raceName}`),console.log(`  📅 Canadian GP date: ${c.dateStart}`),this.testResults.push({test:"Race Transition",status:"PASS"});else throw new Error(`Expected Canadian GP, got: ${c==null?void 0:c.raceName}`);console.log("  🗑️  Testing cache invalidation..."),localStorage.removeItem("qualifyingResults"),localStorage.removeItem("nextRaceData"),console.log("  ✅ Spanish GP cache cleared"),console.log("  🔄 System ready for Canadian GP"),Date.now=n,e&&localStorage.setItem("nextRaceData",e),t&&localStorage.setItem("qualifyingResults",t),this.testResults.push({test:"Cache Invalidation",status:"PASS"})}catch(e){console.error("  ❌ Race transition test failed:",e),this.testResults.push({test:"Race Transition",status:"FAIL"})}}async testSystemReset(){console.log(`
🔄 TEST 4: System Reset for Canadian GP`);try{console.log("  📊 Testing dashboard reset...");const{getDashboardData:e,calculateDashboardStats:t}=await g(async()=>{const{getDashboardData:s,calculateDashboardStats:r}=await import("./dashboard-utils-CP5FU_16.js");return{getDashboardData:s,calculateDashboardStats:r}},__vite__mapDeps([2,0,1,3]),import.meta.url),i=t([{raceId:"bhr-2025",raceName:"Bahrain GP",driverId:4,driverName:"Lando Norris",survivalStatus:{status:"SURVIVED",position:"P2"}},{raceId:"esp-2025",raceName:"Spanish GP",driverId:55,driverName:"Carlos Sainz",survivalStatus:{status:"ELIMINATED",position:"P15"}}]);if(console.log("  📈 Dashboard stats calculated:"),console.log(`    - Picks used: ${i.picksUsed}/20`),console.log(`    - Races completed: ${i.racesCompleted}/24`),console.log(`    - Player status: ${i.playerStatus}`),console.log(`    - Survival rate: ${i.survivalRate}%`),i.playerStatus==="ELIMINATED"&&i.survivalRate===50)console.log("  ✅ Dashboard stats correct after elimination"),this.testResults.push({test:"Dashboard Reset",status:"PASS"});else throw new Error(`Unexpected dashboard stats: ${i.playerStatus}, ${i.survivalRate}%`);console.log("  🏁 Testing Canadian GP preparation...");const n={raceId:"can-2025",raceName:"Canadian GP",raceDate:"2025-06-15T18:00:00+00:00",qualifyingDate:"2025-06-14",location:"Montreal"};console.log(`  📅 Next race: ${n.raceName}`),console.log(`  📍 Location: ${n.location}`),console.log(`  🏎️  Qualifying: ${n.qualifyingDate}`),console.log("  ✅ Canadian GP data prepared"),this.testResults.push({test:"Next Race Preparation",status:"PASS"})}catch(e){console.error("  ❌ System reset test failed:",e),this.testResults.push({test:"System Reset",status:"FAIL"})}}printTestSummary(){console.log(`
========== TEST SUMMARY ==========`);const e=this.testResults.filter(i=>i.status==="PASS").length,t=this.testResults.filter(i=>i.status==="FAIL").length,a=this.testResults.filter(i=>i.status==="SKIP").length;console.log(`✅ PASSED: ${e}`),console.log(`❌ FAILED: ${t}`),console.log(`⏭️  SKIPPED: ${a}`),console.log(`
Detailed Results:`),this.testResults.forEach(i=>{const n=i.status==="PASS"?"✅":i.status==="FAIL"?"❌":"⏭️";console.log(`  ${n} ${i.test}: ${i.status}`)}),t===0?(console.log(`
🎉 ALL CRITICAL TESTS PASSED!`),console.log("📝 Post-race functionality ready for production")):console.log(`
⚠️  Some tests failed - review before production`)}static simulateRaceFinished(){console.log("🏁 Simulating Spanish GP race finished..."),localStorage.removeItem("nextRaceData"),localStorage.removeItem("qualifyingResults"),window.dispatchEvent(new CustomEvent("raceDataUpdated")),console.log("✅ Race finished simulation complete"),console.log("🔄 System should now show Canadian GP countdown")}static simulatePostRaceResults(){console.log("📊 Simulating Spanish GP race results...");const e={session_key:"esp-2025-race",session_name:"Race",location:"Barcelona",date:"2025-06-01",positions:[{position:1,driver_number:1,full_name:"Max Verstappen",team_name:"Red Bull Racing"},{position:2,driver_number:4,full_name:"Lando Norris",team_name:"McLaren"},{position:3,driver_number:16,full_name:"Charles Leclerc",team_name:"Ferrari"},{position:4,driver_number:55,full_name:"Carlos Sainz",team_name:"Williams"},{position:5,driver_number:63,full_name:"George Russell",team_name:"Mercedes"},{position:6,driver_number:44,full_name:"Lewis Hamilton",team_name:"Mercedes"},{position:7,driver_number:11,full_name:"Sergio Perez",team_name:"Red Bull Racing"},{position:8,driver_number:14,full_name:"Fernando Alonso",team_name:"Aston Martin"},{position:9,driver_number:18,full_name:"Lance Stroll",team_name:"Aston Martin"},{position:10,driver_number:81,full_name:"Oscar Piastri",team_name:"McLaren"},{position:11,driver_number:27,full_name:"Nico Hulkenberg",team_name:"Kick Sauber"},{position:12,driver_number:20,full_name:"Kevin Magnussen",team_name:"Haas"},{position:13,driver_number:10,full_name:"Pierre Gasly",team_name:"Alpine"},{position:14,driver_number:31,full_name:"Esteban Ocon",team_name:"Alpine"},{position:15,driver_number:23,full_name:"Alexander Albon",team_name:"Williams"},{position:16,driver_number:2,full_name:"Logan Sargeant",team_name:"Williams"},{position:17,driver_number:77,full_name:"Valtteri Bottas",team_name:"Kick Sauber"},{position:18,driver_number:24,full_name:"Zhou Guanyu",team_name:"Kick Sauber"},{position:19,driver_number:22,full_name:"Yuki Tsunoda",team_name:"RB"},{position:20,driver_number:3,full_name:"Daniel Ricciardo",team_name:"RB"}]};localStorage.setItem("raceResults_esp-2025",JSON.stringify({results:e,timestamp:new Date().toISOString()})),console.log("✅ Mock Spanish GP results cached"),console.log(`🏆 Winner: ${e.positions[0].full_name}`),console.log(`📊 P15-P16: ${e.positions[14].full_name}, ${e.positions[15].full_name}`)}}window.PostRaceTestSuite=de;class J{constructor(){this.testResults=[],this.testUser=null}async runAllTests(){console.log("🧪 Frontend-Backend Integration Test Suite"),console.log("==========================================");try{await this.testAuthenticationFlow(),await this.testPickSavingAndLoading(),await this.testPickChanging(),await this.testPreviousRaceBlocking(),await this.testCrossBrowserPersistence(),await this.testErrorHandling(),await this.testDataConsistency(),this.printTestSummary()}catch(e){console.error("❌ Test suite failed:",e)}}async testAuthenticationFlow(){console.log(`
🔐 TEST 1: Authentication Flow`);try{const{authManager:e}=await g(async()=>{const{authManager:a}=await import("./league-dashboard-BGSKMJy6.js").then(i=>i.f);return{authManager:a}},__vite__mapDeps([0,1]),import.meta.url),t=await e.isAuthenticated();if(console.log(`  📋 Authentication status: ${t?"AUTHENTICATED":"NOT AUTHENTICATED"}`),t){const a=await e.getCurrentUser();console.log(`  👤 Current user: ${a.username||a.userId}`),this.testUser=a,this.addTestResult("Authentication Flow","PASS","User authenticated successfully")}else this.addTestResult("Authentication Flow","SKIP","User not authenticated - manual test required")}catch(e){this.addTestResult("Authentication Flow","FAIL",e.message)}}async testPickSavingAndLoading(){if(console.log(`
💾 TEST 2: Pick Saving and Loading`),!this.testUser){this.addTestResult("Pick Saving/Loading","SKIP","Authentication required");return}try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:n}=await import("./league-dashboard-BGSKMJy6.js").then(s=>s.h);return{amplifyDataService:n}},__vite__mapDeps([0,1]),import.meta.url),t=JSON.parse(localStorage.getItem("nextRaceData"));if(!t)throw new Error("No race data found - please ensure race data is loaded");console.log(`  🏁 Testing with race: ${t.raceName} (${t.raceId})`);const a={driverId:99,driverName:"Test Driver",teamName:"Test Team",isAutoPick:!1};console.log("  📝 Saving test pick...");const i=await e.saveUserPick({driverId:a.driverId.toString(),driverName:a.driverName,teamName:a.teamName,raceId:t.raceId,raceName:t.raceName,isAutoPick:a.isAutoPick});if(i&&i.data){console.log("  ✅ Pick saved successfully"),console.log("  📖 Loading user picks...");const s=(await e.getUserPicks()).find(r=>r.raceId===t.raceId&&r.driverId===a.driverId.toString());if(s)console.log("  ✅ Pick loaded successfully"),await e.deleteUserPick(s.id),console.log("  🧹 Test pick cleaned up"),this.addTestResult("Pick Saving/Loading","PASS","Save and load operations working");else throw new Error("Saved pick not found when loading")}else throw new Error("Pick save operation failed")}catch(e){this.addTestResult("Pick Saving/Loading","FAIL",e.message)}}async testPickChanging(){if(console.log(`
🔄 TEST 3: Pick Changing`),!this.testUser){this.addTestResult("Pick Changing","SKIP","Authentication required");return}try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:n}=await import("./league-dashboard-BGSKMJy6.js").then(s=>s.h);return{amplifyDataService:n}},__vite__mapDeps([0,1]),import.meta.url),t=JSON.parse(localStorage.getItem("nextRaceData")),a=await e.saveUserPick({driverId:"98",driverName:"Initial Test Driver",teamName:"Initial Team",raceId:t.raceId,raceName:t.raceName,isAutoPick:!1});console.log("  📝 Created initial test pick");const i=await e.updateUserPick(a.data.id,{driverId:"97",driverName:"Updated Test Driver",teamName:"Updated Team",isAutoPick:!1});if(i&&i.data){console.log("  ✅ Pick updated successfully");const n=await e.getCurrentRacePick();if(n&&n.driverName==="Updated Test Driver")console.log("  ✅ Pick change verified"),await e.deleteUserPick(n.id),console.log("  🧹 Test pick cleaned up"),this.addTestResult("Pick Changing","PASS","Pick update operations working");else throw new Error("Pick change not reflected in current pick")}else throw new Error("Pick update operation failed")}catch(e){this.addTestResult("Pick Changing","FAIL",e.message)}}async testPreviousRaceBlocking(){if(console.log(`
🚫 TEST 4: Previous Race Blocking`),!this.testUser){this.addTestResult("Previous Race Blocking","SKIP","Authentication required");return}try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:n}=await import("./league-dashboard-BGSKMJy6.js").then(s=>s.h);return{amplifyDataService:n}},__vite__mapDeps([0,1]),import.meta.url),t=await e.addTestPreviousRacePick(96,"Previous Race Driver","Previous Team","test-prev-race","Test Previous GP");console.log("  📝 Added test previous race pick");const i=(await e.getUserPicks()).filter(n=>n.raceId!==JSON.parse(localStorage.getItem("nextRaceData")).raceId);if(console.log(`  📊 Found ${i.length} previous race picks`),i.length>0)console.log("  ✅ Previous race picks are being stored correctly"),await e.deleteUserPick(t.data.id),console.log("  🧹 Test previous race pick cleaned up"),this.addTestResult("Previous Race Blocking","PASS","Previous race pick storage working");else throw new Error("Previous race picks not found")}catch(e){this.addTestResult("Previous Race Blocking","FAIL",e.message)}}async testCrossBrowserPersistence(){if(console.log(`
🌐 TEST 5: Cross-Browser Persistence`),!this.testUser){this.addTestResult("Cross-Browser Persistence","SKIP","Authentication required");return}try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:i}=await import("./league-dashboard-BGSKMJy6.js").then(n=>n.h);return{amplifyDataService:i}},__vite__mapDeps([0,1]),import.meta.url),t=localStorage.getItem("f1survivor_user_picks");localStorage.removeItem("f1survivor_user_picks"),console.log("  🧹 Cleared localStorage temporarily");const a=await e.getUserPicks();console.log(`  📊 Retrieved ${a.length} picks from AWS`),t&&localStorage.setItem("f1survivor_user_picks",t),console.log("  ✅ Data persistence verified - picks available without localStorage"),this.addTestResult("Cross-Browser Persistence","PASS","AWS data persistence working")}catch(e){this.addTestResult("Cross-Browser Persistence","FAIL",e.message)}}async testErrorHandling(){console.log(`
⚠️ TEST 6: Error Handling`);try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:t}=await import("./league-dashboard-BGSKMJy6.js").then(a=>a.h);return{amplifyDataService:t}},__vite__mapDeps([0,1]),import.meta.url);try{throw await e.saveUserPick({driverId:null,raceId:null}),new Error("Should have failed with invalid data")}catch(t){if(t.message.includes("required")||t.message.includes("null")||t.message.includes("validation"))console.log("  ✅ Invalid data properly rejected");else throw t}console.log("  ✅ Error handling working correctly"),this.addTestResult("Error Handling","PASS","Proper error handling implemented")}catch(e){this.addTestResult("Error Handling","FAIL",e.message)}}async testDataConsistency(){if(console.log(`
🔍 TEST 7: Data Consistency`),!this.testUser){this.addTestResult("Data Consistency","SKIP","Authentication required");return}try{const{amplifyDataService:e}=await g(async()=>{const{amplifyDataService:s}=await import("./league-dashboard-BGSKMJy6.js").then(r=>r.h);return{amplifyDataService:s}},__vite__mapDeps([0,1]),import.meta.url),{getCurrentRacePickWithContext:t}=await g(async()=>{const{getCurrentRacePickWithContext:s}=await import("./league-dashboard-BGSKMJy6.js").then(r=>r.j);return{getCurrentRacePickWithContext:s}},__vite__mapDeps([0,1]),import.meta.url),a=JSON.parse(localStorage.getItem("nextRaceData")),i=await e.getCurrentRacePick(a.raceId),n=await t();if(console.log("  📊 Comparing AWS pick with context pick..."),i&&n)if(i.driverId===n.driverId.toString())console.log("  ✅ Data consistency verified - AWS and context picks match"),this.addTestResult("Data Consistency","PASS","Data consistency maintained");else throw new Error(`Data mismatch: AWS=${i.driverId}, Context=${n.driverId}`);else if(!i&&!n)console.log("  ✅ Data consistency verified - no picks in both sources"),this.addTestResult("Data Consistency","PASS","Consistent empty state");else throw new Error("Data inconsistency detected between AWS and context")}catch(e){this.addTestResult("Data Consistency","FAIL",e.message)}}addTestResult(e,t,a){this.testResults.push({testName:e,status:t,message:a}),console.log(`  ${t==="PASS"?"✅":t==="FAIL"?"❌":"⏭️"} ${e}: ${t} - ${a}`)}printTestSummary(){console.log(`
📊 TEST SUMMARY`),console.log("================");const e=this.testResults.filter(n=>n.status==="PASS").length,t=this.testResults.filter(n=>n.status==="FAIL").length,a=this.testResults.filter(n=>n.status==="SKIP").length;console.log(`✅ Passed: ${e}`),console.log(`❌ Failed: ${t}`),console.log(`⏭️ Skipped: ${a}`),console.log(`📊 Total: ${this.testResults.length}`),t>0&&(console.log(`
❌ FAILED TESTS:`),this.testResults.filter(n=>n.status==="FAIL").forEach(n=>{console.log(`  - ${n.testName}: ${n.message}`)})),a>0&&(console.log(`
⏭️ SKIPPED TESTS:`),this.testResults.filter(n=>n.status==="SKIP").forEach(n=>{console.log(`  - ${n.testName}: ${n.message}`)}));const i=Math.round(e/(e+t)*100);console.log(`
🎯 Success Rate: ${i}% (${e}/${e+t} tests passed)`),console.log(t===0?`
🎉 ALL TESTS PASSED! Frontend-Backend Integration is ready for production.`:`
⚠️ Some tests failed. Please review and fix issues before committing.`)}}window.FrontendBackendIntegrationTests=J;window.runIntegrationTests=async function(){await new J().runAllTests()};class R{constructor(e={}){this.raceData=null,this.deadlineInterval=null,this.onDeadlineApproaching=null,this.onDeadlinePassed=null,this.debug=e.debug||!1}log(e,t,a={}){(e==="error"||this.debug&&["debug","info"].includes(e))&&console.log({component:"PickDeadlineManager",timestamp:new Date().toISOString(),level:e,message:t,data:a})}setDebug(e){this.debug=e}initialize(e={}){return this.log("debug","PickDeadlineManager initializing..."),this.deadlineInterval&&(this.log("debug","Clearing existing deadlineInterval.",{intervalId:this.deadlineInterval}),clearInterval(this.deadlineInterval),this.deadlineInterval=null),this.callbacks=e,this.loadRaceData(),!this.raceData||!this.raceData.pickDeadline?(this.log("warn","No race data or pick deadline available for PickDeadlineManager."),!1):(this.onDeadlineApproaching=e.onDeadlineApproaching,this.onDeadlinePassed=e.onDeadlinePassed,this.checkDeadline())}loadRaceData(){try{const e=localStorage.getItem("nextRaceData");if(!e){this.log("debug","No race data found");return}const t=JSON.parse(e);if(!t.pickDeadline){this.log("debug","No deadline configured");return}this.raceData=t,this.log("debug","Race data loaded",{raceId:this.raceData.raceId})}catch(e){this.log("error","Failed to load race data",{error:e.message})}}checkDeadline(){if(!this.raceData||!this.raceData.pickDeadline)return this.log("debug","Cannot check deadline without race data or pick deadline."),!1;const e=new Date,a=new Date(this.raceData.pickDeadline)-e;if(a<=0)return this.log("info","Pick deadline has passed.",{deadline:this.raceData.pickDeadline}),this.onDeadlinePassed&&this.onDeadlinePassed(),this.deadlineInterval&&(clearInterval(this.deadlineInterval),this.deadlineInterval=null),!0;if(this.deadlineInterval||(this.deadlineInterval=setInterval(()=>this.checkDeadline(),1e3),this.log("debug","Deadline check interval started.",{intervalId:this.deadlineInterval})),a<36e5&&this.onDeadlineApproaching){const i=Math.floor(a/36e5),n=Math.floor(a%36e5/6e4),s=Math.floor(a%6e4/1e3);this.onDeadlineApproaching({hours:i,minutes:n,seconds:s})}return!1}isDeadlinePassed(){if(!this.raceData||!this.raceData.pickDeadline)return console.log("Cannot check deadline without race data or pick deadline"),!1;const e=new Date,t=new Date(this.raceData.pickDeadline);return e>=t}}typeof window<"u"&&(window.PickDeadlineManager=R);class ue{constructor(e,t=!1){this.component=e,this.debug=t,this.isProduction=window.location.hostname==="f1survivor.com"}log(e,t,a=null){const i={component:this.component,timestamp:new Date().toISOString(),level:e,message:t,...a&&{data:a}};if(!this.isProduction||e==="error"){const n=JSON.parse(sessionStorage.getItem("f1survivor_logs")||"[]");n.push(i),n.length>100&&n.shift(),sessionStorage.setItem("f1survivor_logs",JSON.stringify(n))}this.isProduction?e==="error"?console.error(i):e==="warn"&&!t.includes("future date")&&console.warn(i):(e==="error"||this.debug&&["warn","info","debug"].includes(e))&&console[e==="debug"?"log":e](i)}}class ge{constructor(){this.logger=new ue("QualifyingResultsManager"),this.maxRetries=3,this.retryDelay=2e3,this.qualifyingResults=null,this.raceData=null,this.debug=!0,this._isInitialized=!1}log(e,t,a=null){if(!this.debug&&e==="debug")return;const i={component:"QualifyingResultsManager",timestamp:new Date().toISOString(),level:e,message:t,...a&&{data:a}};switch(e){case"error":console.error(i);break;case"warn":console.warn(i);break;case"debug":console.debug(i);break;default:console.log(i)}}async initialize(){if(this.loadRaceData(),!this.raceData||!this.raceData.qualifyingDate){this.log("warn","Cannot initialize QRM fully: raceData or raceData.qualifyingDate is missing. Will rely on explicit fetch for auto-pick or other direct calls."),this._isInitialized=!1;return}await this.fetchQualifyingResults(this.raceData.qualifyingDate),this._isInitialized=!0,this.log("debug","QualifyingResultsManager initialized.")}isInitialized(){return this._isInitialized}loadRaceData(){const e=localStorage.getItem("nextRaceData");e?(this.raceData=JSON.parse(e),this.log("debug","Race data loaded",this.raceData)):this.log("warn","No race data available")}_processResults(e,t){return e&&Array.isArray(e)&&e.length>0?(this.qualifyingResults=e.map(a=>({...a,driverId:parseInt(a.driver_number)})),localStorage.setItem("qualifyingResults",JSON.stringify({raceId:t,results:this.qualifyingResults,timestamp:new Date().toISOString()})),this.log("debug","Qualifying results processed and cached",{raceId:t,count:this.qualifyingResults.length}),this.qualifyingResults):(this.log("warn","No results to process or results are not an array",e),this.qualifyingResults=[],[])}async fetchWithRetry(e,t=this.maxRetries){for(let a=0;a<t;a++)try{const i={method:"GET",headers:{Accept:"application/json"}},n=e.includes("api.openf1.org")?e:e.includes("?")?`${e}&_t=${Date.now()}`:`${e}?_t=${Date.now()}`;this.log("debug",`Fetching URL: ${n}`);const s=await fetch(n,i);if(s.ok)return await s.json();if(s.status===404)return null;throw new Error(`HTTP ${s.status}: ${s.statusText}`)}catch(i){if(this.log("warn",`Attempt ${a+1} failed for ${e}:`,i.message),a<t-1)await new Promise(n=>setTimeout(n,this.retryDelay));else throw i}}async fetchQualifyingResults(e){if(e===void 0)return this.log("debug","fetchQualifyingResults called with undefined date. Using fallback."),this.qualifyingResults=this.getFallbackDriver(),this.qualifyingResults;const t=new Date(e),a=new Date;if(this.log("debug",`Date comparison: requestDate=${t.toISOString()}, now=${a.toISOString()}, isFuture=${t>a}`),t>a)return this.log("debug",`Race date ${e} is in the future (${t.toISOString()} > ${a.toISOString()}). Using fallback instead of fetching from OpenF1 API.`),this.qualifyingResults=this.getFallbackDriver(),this.qualifyingResults;try{const i=localStorage.getItem("qualifyingResults");if(i){const n=JSON.parse(i);if(this.raceData&&n.raceId===this.raceData.raceId)if(Date.now()-new Date(n.timestamp).getTime()>60*60*1e3&&t<=a)this.log("debug","Cached qualifying data is stale, fetching fresh data"),localStorage.removeItem("qualifyingResults");else return this.log("debug","Using cached qualifying results"),this.qualifyingResults=n.results,this.qualifyingResults;else this.log("debug","Cache race ID mismatch, clearing cache"),localStorage.removeItem("qualifyingResults")}if(t<=a){const n=await this.fetchFromOpenF1API(e);return!n||n.length===0?(this.log("debug","Using fallback driver (no data available)"),this.getFallbackDriver()):this._processResults(n,this.raceData?this.raceData.raceId:"unknown_race")}else return this.log("debug","Using fallback for future race"),this.getFallbackDriver()}catch(i){return this.log("error","Error fetching qualifying results",i),this.getFallbackDriver()}}async fetchFromOpenF1API(e){try{const t=e.split("-")[0];this.log("debug",`Fetching qualifying data from OpenF1 API for date: ${e}, year: ${t}`),this.log("debug","Searching for recent qualifying sessions...");const i=await this.fetchWithRetry("https://api.openf1.org/v1/sessions?session_name=Qualifying");if(this.log("debug","API response for all qualifying sessions:",{isArray:Array.isArray(i),length:i?i.length:"null/undefined",type:typeof i,firstFewChars:i?JSON.stringify(i).substring(0,200):"null",actualValue:i}),i&&i.length>0){this.log("debug",`Found ${i.length} total qualifying sessions`);const c=i.slice(-5);this.log("debug","Recent qualifying sessions:",c.map(d=>({session_key:d.session_key,location:d.location,date_start:d.date_start,year:d.year})));const l=i.find(d=>d.date_start&&d.date_start.startsWith(e));if(l){this.log("debug",`Found qualifying session: ${l.session_key} at ${l.location}`);const d=await this.fetchSessionData(l.session_key);if(d&&d.length>0)return d;this.log("debug",`Session ${l.session_key} found but no qualifying data returned`)}else{this.log("debug",`No session found with date_start starting with: ${e}`);const d=i.filter(u=>u.year===2025);this.log("debug",`Found ${d.length} sessions for 2025:`,d.map(u=>({session_key:u.session_key,location:u.location,date_start:u.date_start})))}}else this.log("debug","allSessions is empty or null/undefined");this.log("debug",`No session found for ${e}, trying year-based search...`);const n=`https://api.openf1.org/v1/sessions?year=${t}&session_name=Qualifying`,s=await this.fetchWithRetry(n);if(this.log("debug","Year-based API response:",{isArray:Array.isArray(s),length:s?s.length:"null/undefined",type:typeof s,actualValue:s}),!s||s.length===0)return this.log("debug","No qualifying sessions found for year",t),[];const r=s.find(c=>c.date_start&&c.date_start.startsWith(e));return r?(this.log("debug",`Found qualifying session: ${r.session_key} at ${r.location}`),await this.fetchSessionData(r.session_key)):(this.log("debug",`No qualifying session found starting on ${e}`),[])}catch(t){return this.log("error","Error fetching from OpenF1 API",t),[]}}async fetchSessionData(e){try{const t=`https://api.openf1.org/v1/drivers?session_key=${e}`,a=await this.fetchWithRetry(t);if(!a||a.length===0)return this.log("debug","No drivers found for session",e),[];const i=`https://api.openf1.org/v1/laps?session_key=${e}`,n=await this.fetchWithRetry(i);if(!n||n.length===0)return this.log("debug","No lap data found for session",e),[];const s=this.calculateQualifyingOrder(a,n);return this.log("debug",`Processed ${s.length} drivers from OpenF1 API for session ${e}`),s}catch(t){return this.log("error","Error fetching session data",t),[]}}calculateQualifyingOrder(e,t){const a={};t.forEach(n=>{if(n.lap_duration&&n.driver_number){const s=a[n.driver_number];(!s||n.lap_duration<s.lap_duration)&&(a[n.driver_number]=n)}});const i=e.map(n=>{const s=a[n.driver_number];return{driver_number:n.driver_number,full_name:n.full_name,team_name:n.team_name,lap_duration:s?s.lap_duration:null}});return i.sort((n,s)=>n.lap_duration===null&&s.lap_duration===null?0:n.lap_duration===null?1:s.lap_duration===null?-1:n.lap_duration-s.lap_duration),i.forEach((n,s)=>{n.position=s+1}),i}getFallbackDriver(){var i,n,s;const e=[{driverId:27,driverName:"Nico Hulkenberg",position:15,teamName:"Kick Sauber"},{driverId:31,driverName:"Esteban Ocon",position:15,teamName:"Haas F1 Team"},{driverId:5,driverName:"Gabriel Bortoleto",position:15,teamName:"Kick Sauber"},{driverId:87,driverName:"Oliver Bearman",position:15,teamName:"Haas F1 Team"}];if((n=(i=this.raceData)==null?void 0:i.qualifyingDate)!=null&&n.startsWith("2025"))return this.log("debug","Using Hulkenberg as fallback for 2025 season"),[e[0]];const a=((s=this.raceData)!=null&&s.raceId?this.raceData.raceId.split("-")[0].length:0)%e.length;return this.log("debug","Using fallback driver"),[e[a]]}getIntelligentFallback(){var i;const e={Monaco:[27,20,31],Silverstone:[23,77,18]},t=(i=this.raceData)==null?void 0:i.raceCircuit,a=e[t]||[20,31,27,18];for(const n of a)if(!this.isDriverPicked(n)){const s=this.getDriverInfo(n);return[{driverId:n,driverName:(s==null?void 0:s.name)||`Driver ${n}`,position:15,teamName:(s==null?void 0:s.team)||"Unknown Team"}]}return this.getFallbackDriver()}isDriverPicked(e){const t=localStorage.getItem("f1survivor_user_picks");return t?(JSON.parse(t).picks||[]).some(i=>i.driverId===e):!1}getNextAvailablePosition(e=15){if(!this.qualifyingResults||!Array.isArray(this.qualifyingResults)||this.qualifyingResults.length===0)return this.log("warn","Qualifying results not available or not an array for getNextAvailablePosition"),null;for(let t=e+1;t<=20;t++){const a=this.qualifyingResults.find(i=>i.position===t);if(a&&!this.isDriverPicked(a.driverId))return{driverId:a.driverId,driverName:a.full_name,position:t,teamName:a.team_name}}for(let t=e-1;t>=1;t--){const a=this.qualifyingResults.find(i=>i.position===t);if(a&&!this.isDriverPicked(a.driverId))return{driverId:a.driverId,driverName:a.full_name,position:t,teamName:a.team_name}}return null}getAutoPick(){if(!this.qualifyingResults||!Array.isArray(this.qualifyingResults)||this.qualifyingResults.length===0)return this.log("warn","Qualifying results not available or not an array for getAutoPick"),this.getFallbackDriver()[0];const e=this.qualifyingResults.find(t=>t.position===15);return e&&!this.isDriverPicked(e.driverId)?{driverId:e.driverId,driverName:e.full_name,teamName:e.team_name,position:e.position}:this.getNextAvailablePosition(15)}}class me{constructor(){this.qualifyingManager=new ge,this.raceData=null,this.debug=!0}log(e,t,a=null){if(!this.debug&&e==="debug")return;const i={component:"AutoPickManager",timestamp:new Date().toISOString(),level:e,message:t,...a&&{data:a}};switch(e){case"error":console.error(i);break;case"warn":console.warn(i);break;case"debug":console.debug(i);break;default:console.log(i)}}async initialize(){window.addEventListener("triggerAutoPick",this.handleAutoPickTrigger.bind(this)),this.log("debug","AutoPickManager event listener for triggerAutoPick registered.");const e=localStorage.getItem("nextRaceData");e?(this.currentRaceData=JSON.parse(e),this.log("debug","AutoPickManager context: Race data loaded from localStorage",this.currentRaceData)):this.log("warn","AutoPickManager context: No nextRaceData found in localStorage during initialization."),this.qualifyingManager.isInitialized()||await this.qualifyingManager.initialize()}loadRaceData(){const e=localStorage.getItem("nextRaceData");e?(this.raceData=JSON.parse(e),this.log("debug","Race data loaded",this.raceData)):this.log("warn","No race data available")}async handleAutoPickTrigger(e){const t=e.detail.raceId;if(this.log("debug","handleAutoPickTrigger called for raceId:",t),!await D.isAuthenticated()){this.log("warn","User not authenticated, skipping auto-pick");return}const i=this.getNextRaceData();if(!i){this.log("error","No raceData found for auto-pick trigger. Ensure nextRaceData is in localStorage.");return}const n=i.raceId===t?i.raceName:"Selected Race",r=(await this.loadUserPicks()).find(c=>c.raceId===t);if(r){this.log("debug","User already has a pick for this race, no auto-pick needed.",r);return}this.log("info",`No pick found for race ${t}. Proceeding with auto-pick.`),await this.applyAutoPick(t,n)}async applyAutoPick(e,t){this.log("debug","Applying auto-pick logic for race:",{raceId:e,raceName:t}),this.log("debug","Forcing refresh of qualifying results to get latest completed session for auto-pick.");try{const i=this.getNextRaceData(),n=i==null?void 0:i.qualifyingDate;n?await this.qualifyingManager.fetchQualifyingResults(n):this.log("warn","No qualifying date available for auto-pick, using existing data")}catch(i){this.log("error","Failed to fetch latest qualifying results for auto-pick.",i),this.showAutopickNotification({error:"Could not fetch latest qualifying data to perform auto-pick."});return}const a=this.qualifyingManager.getAutoPick();if(a&&a.driverId){const i={driverName:a.driverName,teamName:a.teamName,isAutoPick:!0,position:a.position};try{const n=await K(a.driverId,i);this.log("debug","Auto-pick saved to AWS backend",n);const s={driverId:a.driverId,raceId:e,raceName:t,driverName:a.driverName,position:a.position,teamName:a.teamName,timestamp:new Date().toISOString(),isAutoPick:!0};this.showAutopickNotification(s),this.updateDriverSelectionUI(s)}catch(n){this.log("error","Failed to save auto-pick to AWS backend",n),this.showAutopickNotification({error:"Failed to save auto-pick. Please try making a manual pick.",raceName:t})}}else this.log("warn","Could not determine a driver for auto-pick.",{raceId:e}),this.showAutopickNotification({error:"Could not determine a suitable driver for auto-pick.",raceName:t})}showAutopickNotification(e){const t=document.createElement("div");t.classList.add("auto-pick-notification"),t.innerHTML=`
            <div class="auto-pick-header">
                <h3>Auto-Pick Applied</h3>
                <button id="dismiss-autopick" class="close-btn">×</button>
            </div>
            <div class="auto-pick-content">
                <p>You didn't select a driver before the deadline. The P${e.position} qualifier has been automatically selected for you:</p>
                <div class="auto-pick-driver">
                    <span class="position">P${e.position}</span>
                    <strong>${e.driverName}</strong>
                    <span class="team">${e.teamName}</span>
                </div>
                ${e.position!==15?`
                    <div class="auto-pick-note">
                        <small>Note: P15 was already selected, so P${e.position} was chosen instead.</small>
                    </div>
                `:""}
            </div>
            <div class="auto-pick-footer">
                <button id="confirm-autopick" class="confirm-btn">OK</button>
            </div>
        `,document.body.appendChild(t),document.getElementById("dismiss-autopick").addEventListener("click",()=>{t.remove()}),document.getElementById("confirm-autopick").addEventListener("click",()=>{t.remove()}),setTimeout(()=>{document.body.contains(t)&&t.remove()},1e4)}updateDriverSelectionUI(e){const t=document.querySelector(`.driver-card[data-driver-id="${e.driverId}"]`);if(t){document.querySelectorAll(".driver-card.selected").forEach(s=>{s.classList.remove("selected")}),t.classList.add("selected"),t.classList.add("auto-picked");let n=t.querySelector(".auto-pick-badge");n||(n=document.createElement("div"),n.classList.add("auto-pick-badge"),n.textContent="AUTO",t.appendChild(n)),t.setAttribute("title","This driver was automatically selected because you didn't make a pick before the deadline.")}const a=document.querySelector(".pick-status");a&&(a.textContent=`Auto-pick applied: ${e.driverName} (P${e.position})`,a.className="pick-status auto-pick-status");const i=document.getElementById("make-pick-btn");i&&(i.textContent=`AUTO-PICKED: ${e.driverName.split(" ")[1].toUpperCase()}`,i.style.backgroundColor="#666",i.disabled=!0)}async loadUserPicks(){try{return await T()}catch(e){return this.log("error","Failed to load picks from AWS backend",e),[]}}getNextRaceData(){return this.currentRaceData||this.raceData}logDebug(e,t=null){this.log("debug",e,t)}logError(e,t){this.log("error",e,t)}logWarn(e,t=null){this.log("warn",e,t)}logInfo(e){this.log("info",e)}}const I={canChangePick(o){try{const e=new R;return e.loadRaceData(),!e.initialize()}catch(e){return console.error("Error checking if pick can be changed:",e),!1}},updateMakePickButtonText(o,e){try{const t=document.getElementById("make-pick-btn");if(!t){console.warn("Make pick button not found in DOM");return}if(!o)t.textContent="MAKE YOUR PICK";else if(e){const i=(o.driverName||"Unknown Driver").split(" ").pop();t.textContent=`PICKED: ${i.toUpperCase()} (CHANGE)`}else{const i=(o.driverName||"Unknown Driver").split(" ").pop();t.textContent=`PICKED: ${i.toUpperCase()}`}}catch(t){console.error("Error updating make pick button text:",t)}},showCurrentPickInModal(o){try{const e=document.getElementById("current-pick-display"),t=document.getElementById("current-pick-name"),a=document.querySelector("#driver-selection-screen h2");if(!e||!t){console.warn("Current pick display elements not found in DOM");return}if(o){if(e.style.display="block",t.textContent=o.driverName||"Unknown Driver",a){const i=JSON.parse(localStorage.getItem("nextRaceData")),n=(i==null?void 0:i.raceName)||"Next Race";a.textContent=`Change Your Pick for ${n}`}}else if(e.style.display="none",a){const i=JSON.parse(localStorage.getItem("nextRaceData")),n=(i==null?void 0:i.raceName)||"Next Race";a.textContent=`Pick Your Driver for ${n}`}}catch(e){console.error("Error showing current pick in modal:",e)}},highlightCurrentPickInGrid(o){try{if(!o)return;const e=document.querySelector(".driver-card.current-pick");e&&e.classList.remove("current-pick");const t=document.querySelector(`[data-driver-id="${o.driverId}"]`);t&&t.classList.add("current-pick")}catch(e){console.error("Error highlighting current pick in grid:",e)}},updateConfirmButton(o){try{const e=document.getElementById("confirm-pick-btn");if(!e){console.warn("Confirm button not found in DOM");return}o?(e.textContent="Confirm Change",e.classList.add("change-mode")):(e.textContent="Confirm Pick",e.classList.remove("change-mode"))}catch(e){console.error("Error updating confirm button:",e)}}};console.log("app.js loaded - start");let U=!0;try{const o="__test__";localStorage.setItem(o,o),localStorage.removeItem(o)}catch{U=!1,console.warn("localStorage is not available. User picks will not be saved between sessions.")}const v=20,he={name:"Monaco GP",deadline:"2025-05-25 12:00 UTC"},f=[{id:1,number:1,name:"Max Verstappen",team:"Red Bull Racing",teamColor:"#3671C6",imageUrl:"assets/images/drivers/verstappen.png",isAlreadyPicked:!1},{id:2,number:22,name:"Yuki Tsunoda",team:"Red Bull Racing",teamColor:"#3671C6",imageUrl:"assets/images/drivers/tsunoda.png",isAlreadyPicked:!1},{id:3,number:16,name:"Charles Leclerc",team:"Ferrari",teamColor:"#E80020",imageUrl:"assets/images/drivers/leclerc.png",isAlreadyPicked:!1},{id:4,number:44,name:"Lewis Hamilton",team:"Ferrari",teamColor:"#E80020",imageUrl:"assets/images/drivers/hamilton.png",isAlreadyPicked:!1},{id:5,number:63,name:"George Russell",team:"Mercedes",teamColor:"#27F4D2",imageUrl:"assets/images/drivers/russell.png",isAlreadyPicked:!1},{id:6,number:12,name:"Kimi Antonelli",team:"Mercedes",teamColor:"#27F4D2",imageUrl:"assets/images/drivers/antonelli.png",isAlreadyPicked:!1},{id:7,number:4,name:"Lando Norris",team:"McLaren",teamColor:"#FF8000",imageUrl:"assets/images/drivers/norris.png",isAlreadyPicked:!1},{id:8,number:81,name:"Oscar Piastri",team:"McLaren",teamColor:"#FF8000",imageUrl:"assets/images/drivers/piastri.png",isAlreadyPicked:!1},{id:9,number:14,name:"Fernando Alonso",team:"Aston Martin",teamColor:"#229971",imageUrl:"assets/images/drivers/alonso.png",isAlreadyPicked:!1},{id:10,number:18,name:"Lance Stroll",team:"Aston Martin",teamColor:"#229971",imageUrl:"assets/images/drivers/stroll.png",isAlreadyPicked:!1},{id:11,number:10,name:"Pierre Gasly",team:"Alpine",teamColor:"#0093CC",imageUrl:"assets/images/drivers/gasly.png",isAlreadyPicked:!1},{id:12,number:43,name:"Franco Colapinto",team:"Alpine",teamColor:"#0093CC",imageUrl:"assets/images/drivers/colapinto.png",isAlreadyPicked:!1},{id:13,number:23,name:"Alexander Albon",team:"Williams",teamColor:"#64C4FF",imageUrl:"assets/images/drivers/albon.png",isAlreadyPicked:!1},{id:14,number:55,name:"Carlos Sainz",team:"Williams",teamColor:"#64C4FF",imageUrl:"assets/images/drivers/sainz.png",isAlreadyPicked:!1},{id:15,number:6,name:"Isack Hadjar",team:"Racing Bulls",teamColor:"#6692FF",imageUrl:"assets/images/drivers/hadjar.png",isAlreadyPicked:!1},{id:16,number:30,name:"Liam Lawson",team:"Racing Bulls",teamColor:"#6692FF",imageUrl:"assets/images/drivers/lawson.png",isAlreadyPicked:!1},{id:17,number:27,name:"Nico Hulkenberg",team:"Kick Sauber",teamColor:"#52E252",imageUrl:"assets/images/drivers/hulkenberg.png",isAlreadyPicked:!1},{id:18,number:5,name:"Gabriel Bortoleto",team:"Kick Sauber",teamColor:"#52E252",imageUrl:"assets/images/drivers/bortoleto.png",isAlreadyPicked:!1},{id:19,number:31,name:"Esteban Ocon",team:"Haas F1 Team",teamColor:"#B6BABD",imageUrl:"assets/images/drivers/ocon.png",isAlreadyPicked:!1},{id:20,number:87,name:"Oliver Bearman",team:"Haas F1 Team",teamColor:"#B6BABD",imageUrl:"assets/images/drivers/bearman.png",isAlreadyPicked:!1}];let Q=[],k=null,N,_,w,A,h,C;function Y(){N.classList.add("active"),A.disabled=!0}function j(){N.classList.remove("active"),A.disabled=!1}function P(o){_.textContent=o,_.classList.add("active")}function E(){_.classList.remove("active")}let p,x,$,M,q,O,B;function fe(o){if(console.log("Showing confirmation modal for driver:",o),!p){console.error("Confirmation modal element not found!");return}const e=y(),t=!!e;x.src=o.imageUrl,x.alt=o.name,$.textContent=o.name,M.textContent=o.team,M.style.color=o.teamColor,q.textContent=o.number;const a=p.querySelector("h3"),i=p.querySelector(".confirmation-warning p");t&&a?a.textContent="Confirm Pick Change":a&&(a.textContent="Confirm Your Pick"),t&&i&&e?i.innerHTML=`<strong>Note:</strong> You are changing from ${e.driverName} to ${o.name}. You can continue to change your pick until 1 hour before the race.`:i&&(i.innerHTML="<strong>Remember:</strong> Once confirmed, you cannot pick this driver again this season."),p.style.setProperty("--accent-color",o.teamColor),p.classList.add("active"),console.log("Added active class to modal"),document.addEventListener("keydown",Z),anime({targets:".confirmation-modal-content",scale:[.9,1],opacity:[0,1],duration:400,easing:"easeOutElastic(1, .8)"}),anime({targets:"#confirmation-driver-image",translateY:[20,0],opacity:[0,1],delay:200,duration:500,easing:"easeOutQuad"})}function b(){p&&(p.classList.remove("active"),document.removeEventListener("keydown",Z))}function Z(o){o.key==="Escape"&&b()}function pe(){console.log("Initializing confirmation modal..."),p=document.getElementById("confirmation-modal"),x=document.getElementById("confirmation-driver-image"),$=document.getElementById("confirmation-driver-name"),M=document.getElementById("confirmation-driver-team"),q=document.getElementById("confirmation-driver-number"),O=document.getElementById("final-confirm-btn"),B=document.getElementById("cancel-pick-btn");const o=document.getElementById("close-confirmation-modal-btn");if(console.log("Modal elements found:",{modal:!!p,image:!!x,name:!!$,team:!!M,number:!!q,confirmBtn:!!O,cancelBtn:!!B,closeBtn:!!o}),!p){console.error("Confirmation modal not found in DOM");return}o.addEventListener("click",b),B.addEventListener("click",b),O.addEventListener("click",async()=>{console.log("Final confirm button clicked");const e=f.find(t=>t.id===k);if(!e){console.error("Selected driver not found"),P("Invalid driver selection. Please try again.");return}try{b(),Y(),E();const t=JSON.parse(localStorage.getItem("nextRaceData"));if(!t||!t.raceId)throw new Error("Race data not initialized. Please refresh the page.");const a={driverName:e.name,teamName:e.team,isAutoPick:!1},i=await K(k,a);if(!i)throw new Error("Failed to save pick. Please try again.");console.log("Successfully saved pick to AWS:",i);try{const s=!new R().isDeadlinePassed(),r=await y();I.updateMakePickButtonText(r,s)}catch(n){console.warn("Deadline manager failed during pick confirmation, using fallback:",n);const s=await y();s&&I.updateMakePickButtonText(s,!0)}C.style.display="none",anime({targets:h,scale:[1.1,1],duration:400,easing:"easeOutElastic(1, .8)"})}catch(t){console.error("Failed to submit pick:",t),P(t.message||"Failed to submit your pick. Please try again."),b()}finally{j()}}),console.log("Confirmation modal initialized successfully")}async function ye(){try{Y(),E(),w.innerHTML="";for(let e=0;e<v;e++){const t=document.createElement("div");t.className="driver-card skeleton",t.innerHTML=`
                <div class="img"></div>
                <div class="driver-name"></div>
                <div class="driver-team"></div>
            `,w.appendChild(t)}await new Promise(e=>setTimeout(e,1e3)),w.innerHTML="",f.forEach(e=>{e.isAlreadyPicked=!1});try{const e=await T();console.log("Loaded picks for grid from AWS:",e),Array.isArray(e)?f.forEach(t=>{const a=e.some(i=>(typeof i=="object"?i.driverId:i)===t.id);t.isAlreadyPicked=a,console.log(`Driver ${t.name} (${t.id}) picked status:`,a)}):console.error("Picks is not an array:",e)}catch(e){console.error("Error loading picks from AWS:",e),console.log("No picks loaded - user may be unauthenticated")}console.log("Rendering grid with drivers:",f.map(e=>({name:e.name,id:e.id,isAlreadyPicked:e.isAlreadyPicked}))),f.forEach(e=>{const t=document.createElement("div");t.className=`driver-card${e.isAlreadyPicked?" picked":""}`,t.dataset.driverId=e.id;const i=(n=>{const s=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return s?{r:parseInt(s[1],16),g:parseInt(s[2],16),b:parseInt(s[3],16)}:null})(e.teamColor);if(i&&(t.style.setProperty("--team-color",e.teamColor),t.style.setProperty("--team-color-alpha",`rgba(${i.r}, ${i.g}, ${i.b}, 0.3)`)),t.innerHTML=`
                <img src="${e.imageUrl}" alt="${e.name}" onerror="this.src='assets/images/drivers/default.svg'">
                <div class="driver-name">${e.name}</div>
                <div class="driver-team" style="color: ${e.teamColor}">${e.team}</div>
                ${e.isAlreadyPicked?'<div class="tooltip">Already picked in a previous race</div>':""}
            `,e.isAlreadyPicked){const n=t.querySelector(".tooltip");n&&t.addEventListener("mouseenter",()=>{const s=t.getBoundingClientRect(),r=n.getBoundingClientRect(),c=s.top-r.height-10,l=s.left+(s.width-r.width)/2,d=window.innerWidth,u=Math.max(10,Math.min(l,d-r.width-10)),m=Math.max(10,c);n.style.top=`${m}px`,n.style.left=`${u}px`})}w.appendChild(t)});const o=await y();I.highlightCurrentPickInGrid(o)}catch(o){console.error("Error rendering driver grid:",o),P("Failed to load drivers. Please try again.")}finally{j()}}function X(){const o=document.getElementById("make-pick-btn");if(!o){console.warn("Make pick button not found when trying to attach listener");return}const e=o.cloneNode(!0);o.parentNode.replaceChild(e,o),e.addEventListener("click",async()=>{if(console.log("Make pick button clicked"),e.disabled){console.log("Button is disabled, ignoring click");return}if(!await D.isAuthenticated()){console.log("User not authenticated, showing auth modal"),sessionStorage.setItem("redirectAfterAuth",window.location.href),await V.showModal("signin");return}const a=await y(),i=!!a;console.log("Current pick:",a),console.log("Is changing:",i),k=null;const n=document.getElementById("driver-selection-screen");n&&(n.style.display="flex"),I.showCurrentPickInModal(a),I.updateConfirmButton(i),await ye()}),console.log("Make pick button event listener attached")}const ve=async()=>{console.log("Initializing driver selection..."),h=document.getElementById("make-pick-btn"),C=document.getElementById("driver-selection-screen");const o=document.getElementById("close-selection-btn");A=document.getElementById("confirm-pick-btn"),N=document.getElementById("loading-overlay"),_=document.getElementById("error-message"),w=document.getElementById("driver-grid");const t=Object.entries({makePickBtn:h,driverSelectionScreen:C,closeSelectionBtn:o,confirmPickBtn:A,loadingOverlay:N,errorMessage:_,driverGrid:w}).filter(([s,r])=>!r).map(([s])=>s);if(t.length>0)throw new Error(`Missing required elements in initializeDriverSelection: ${t.join(", ")}`);pe();const a=new me;if(a.debug=!0,a.qualifyingManager.debug=!0,a.initialize(),new R().initialize({onDeadlineApproaching:s=>{const r=document.createElement("div");r.id="deadline-message";const c=s.hours===0&&s.minutes<60;r.className=`deadline-status deadline-warning${c?" urgent-pulse":""}`,r.textContent=`Selection closes in: ${s.hours}h ${s.minutes}m ${s.seconds}s`,s.totalMinutes<60&&s.totalMinutes===59&&s.seconds===59&&console.log("Warning user about pick change deadline approaching");const l=document.getElementById("deadline-message"),d=document.querySelector(".driver-selection-content"),u=document.querySelector(".driver-grid");l?(s.seconds===59&&console.log("Replacing existing status element"),l.replaceWith(r)):d&&u&&(console.log("Inserting new status element"),d.insertBefore(r,u));const m=document.querySelector(".race-countdown-container .pick-status");m&&(m.className=`pick-status${c?" urgent-pulse":""}`,m.textContent="Pick deadline approaching!")},onDeadlinePassed:async()=>{console.log("Deadline passed callback triggered");const s=document.querySelector(".race-countdown-container .pick-status");if(s&&(s.className="pick-status deadline-passed",s.textContent="Selection locked: Deadline has passed"),h){h.disabled=!0,h.style.opacity="0.5",h.style.cursor="not-allowed";const d=y();if(d){const u=d.driverName.split(" ").pop();h.textContent=`PICKED: ${u.toUpperCase()}`}}const r=JSON.parse(localStorage.getItem("nextRaceData")),c=await T();console.log("Checking for existing pick:",{raceData:r,userPicks:c});const l=c.find(d=>d.raceId===(r==null?void 0:r.raceId));if(console.log("Existing pick found:",l),r&&!l){console.log("No pick made before deadline, triggering auto-pick");const d=new CustomEvent("triggerAutoPick",{detail:{raceId:r.raceId,timestamp:new Date().toISOString()}});console.log("Dispatching auto-pick event:",d),window.dispatchEvent(d)}else console.log("Pick already exists or no race data available")}})){console.log("Deadline is passed, disabling button"),h.disabled=!0,h.style.opacity="0.5",h.style.cursor="not-allowed";const s=y();if(s){const c=s.driverName.split(" ").pop();h.textContent=`PICKED: ${c.toUpperCase()}`}const r=document.querySelector(".race-countdown-container .pick-status");r&&(r.className="pick-status deadline-passed",r.textContent="Selection locked: Deadline has passed")}if(window.mockDrivers=f,window.userPicks=Q,U)try{const s=await T();s&&s.length>0&&(s.forEach(r=>{const c=f.find(l=>l.id===r.driverId);c&&(c.isAlreadyPicked=!0)}),console.log("Loaded user picks from AWS backend:",s))}catch(s){console.error("Failed to load picks from AWS backend:",s)}X(),o.addEventListener("click",()=>{console.log("Close button clicked"),C.style.display="none",E()}),w.addEventListener("click",async s=>{const r=s.target.closest(".driver-card");if(!r||r.classList.contains("skeleton"))return;const c=parseInt(r.dataset.driverId);f.find(m=>m.id===c);const l=await y();if(l&&l.driverId===c){r.classList.add("selected"),k=c,E();return}if(await z(c)){P("You have already picked this driver in a previous race!");return}const u=document.querySelector(".driver-card.selected");u&&u.classList.remove("selected"),r.classList.add("selected"),k=c,E()}),A.addEventListener("click",async()=>{if(!k){P("Please select a driver first!");return}const s=f.find(c=>c.id===k);if(!s){P("Invalid driver selection!");return}if(await z(k)){P("You have already picked this driver in a previous race!");return}fe(s)}),console.log("Driver selection initialized successfully")};function ke(o){const e=new Date(o);return new Intl.DateTimeFormat(navigator.language,{weekday:"short",month:"short",day:"numeric",hour:"numeric",minute:"numeric",timeZoneName:"short"}).format(e)}function Se(o){try{if(o&&o.pickDeadline){const t=ke(o.pickDeadline),a=document.getElementById("selection-deadline");a&&(a.textContent=`Selection deadline: ${t}`);const i=document.querySelector("#driver-selection-screen .deadline");i&&(i.textContent=`Selection deadline: ${t}`)}const e=document.getElementById("current-gp-name");e&&o&&(e.textContent=o.raceName||he.name)}catch(e){console.error("Error updating GP info:",e)}}async function we(){try{const o=document.getElementById("race-countdown-container"),e=document.getElementById("make-pick-btn"),t=document.getElementById("driver-selection-screen"),a=document.getElementById("close-selection-btn"),i=document.getElementById("confirm-pick-btn"),n=document.getElementById("loading-overlay"),s=document.getElementById("error-message"),r=document.getElementById("driver-grid"),l=Object.entries({countdownContainer:o,makePickBtn:e,driverSelectionScreen:t,closeSelectionBtn:a,confirmPickBtn:i,loadingOverlay:n,errorMessage:s,driverGrid:r}).filter(([m,L])=>!L).map(([m])=>m);if(l.length>0)throw new Error(`Missing required elements: ${l.join(", ")}`);await new ce(o).initialize(),console.log("Race countdown timer initialized");const u=JSON.parse(localStorage.getItem("nextRaceData"));if(!u||!u.raceId)throw new Error("Race data initialization failed");Se(u),await ve(),oe(),Pe()}catch(o){console.error("App initialization failed:",o);const e=document.createElement("div");e.className="error-message active",e.textContent="Failed to initialize app. Please refresh the page.",document.body.prepend(e)}}async function Pe(){try{console.log("Initializing authentication state management"),D.onAuthStateChange(e=>{F(e)});const o=await D.isAuthenticated();F(o),console.log("Authentication state management initialized")}catch(o){console.error("Failed to initialize authentication state:",o)}}async function F(o){var i;console.log("Updating UI for auth state:",o);const e=document.querySelectorAll(".sign-in"),t=document.querySelectorAll(".nav-link"),a=document.getElementById("make-pick-btn");if(o)try{const n=await D.getCurrentUser(),s=((i=n==null?void 0:n.signInDetails)==null?void 0:i.loginId)||(n==null?void 0:n.username)||"User";e.forEach(r=>{r.textContent=s.split("@")[0],r.onclick=c=>{c.preventDefault(),c.stopPropagation(),W()},r.classList.add("authenticated")}),t.forEach(r=>{r.style.display="block"}),a&&(G(),a.style.display="block"),ee(),console.log("UI updated for authenticated user:",s)}catch(n){console.error("Error getting user info:",n),e.forEach(s=>{s.textContent="User",s.onclick=r=>{r.preventDefault(),r.stopPropagation(),W()},s.classList.add("authenticated")}),t.forEach(s=>{s.style.display="block"}),a&&(G(),a.style.display="block")}else e.forEach(n=>{n.textContent="Sign In",n.onclick=()=>showAuthModal("signin"),n.classList.remove("authenticated")}),t.forEach(n=>{n.style.display="none"}),a&&(a.textContent="SIGN IN TO MAKE PICKS",a.style.display="block"),De(),console.log("UI updated for unauthenticated user")}async function G(){try{const o=document.getElementById("make-pick-btn");if(!o)return;const e=await y();if(e)try{const t=new R;t.loadRaceData();const a=!t.isDeadlinePassed();I.updateMakePickButtonText(e,a),console.log("Updated button text for existing pick:",e.driverName)}catch(t){console.warn("Deadline manager failed, using fallback for button text:",t),I.updateMakePickButtonText(e,!0)}else o.textContent="MAKE YOUR PICK",console.log("Updated button text for no existing pick")}catch(o){console.error("Error updating pick button text after auth:",o);const e=document.getElementById("make-pick-btn");e&&(e.textContent="MAKE YOUR PICK")}}function W(){document.querySelectorAll(".user-menu").forEach(a=>a.remove());const e=document.createElement("div");e.className="user-menu",e.innerHTML=`
        <div class="user-menu-content">
            <button onclick="handleSignOut()" style="
                background: #ffffff;
                border: 2px solid #dc2626;
                color: #dc2626;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
                font-weight: 600;
                width: 100%;
                transition: all 0.2s ease;
            " 
            onmouseover="this.style.background='#dc2626'; this.style.color='#ffffff'" 
            onmouseout="this.style.background='#ffffff'; this.style.color='#dc2626'">
                Sign Out
            </button>
        </div>
    `;const t=document.querySelector(".sign-in");if(t){const a=t.getBoundingClientRect();e.style.position="fixed",e.style.top=`${a.bottom+5}px`,e.style.right="20px",e.style.zIndex="9999",e.style.background="#ffffff",e.style.border="2px solid #374151",e.style.borderRadius="6px",e.style.padding="0.5rem",e.style.boxShadow="0 4px 12px rgba(0, 0, 0, 0.15)"}document.body.appendChild(e),setTimeout(()=>{document.addEventListener("click",function a(i){e.contains(i.target)||(e.remove(),document.removeEventListener("click",a))})},100)}async function Ie(){try{console.log("Signing out user");const o=await D.signOut();o.success?(console.log("Sign out successful"),document.querySelectorAll(".user-menu").forEach(t=>t.remove()),F(!1),window.location.pathname.includes("dashboard")&&(window.location.href="index.html")):console.error("Sign out failed:",o.error)}catch(o){console.error("Sign out error:",o)}}function De(){ee();const o=document.getElementById("main-action-area");if(o){const e=document.createElement("div");e.id="unauthenticated-cta",e.className="unauthenticated-message",e.innerHTML=`
            <div class="auth-cta-content">
                <h3>🏁 Ready to Play F1 Survivor?</h3>
                <p>Authentication is required to save picks and compete in leagues!</p>
                <div class="auth-buttons">
                    <button class="cta-button" onclick="showAuthModal('signup')">
                        Create Account
                    </button>
                    <button class="cta-button secondary" onclick="showAuthModal('signin')">
                        Sign In
                    </button>
                </div>
                <p class="auth-note">Your picks are securely stored in AWS and synced across devices.</p>
            </div>
        `,o.innerHTML="",o.appendChild(e)}}function ee(){const o=document.getElementById("unauthenticated-cta");o&&o.remove();const e=document.getElementById("main-action-area");e&&!document.getElementById("make-pick-btn")&&(e.innerHTML=`
            <button class="cta-button" id="make-pick-btn">MAKE YOUR PICK</button>
        `,X(),te())}function te(){const o=document.getElementById("nav-pick-btn"),e=document.getElementById("make-pick-btn");if(o&&e){const t=o.cloneNode(!0);o.parentNode.replaceChild(t,o),t.addEventListener("click",a=>{a.preventDefault(),e.click()}),console.log("Navigation Pick button event listener attached")}}document.addEventListener("DOMContentLoaded",()=>{te()});window.showAuthModal=async(o="signin")=>{await V.showModal(o)};window.handleSignOut=Ie;function H(){console.log("DOM fully loaded, starting app initialization"),we().catch(o=>{console.error("App initialization failed:",o);const e=document.createElement("div");e.className="error-message active",e.textContent="Failed to initialize app. Please refresh the page.",document.body.prepend(e)})}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",H):(console.log("DOM already loaded, initializing immediately"),H());function Re(){confirm("Are you sure you want to clear all your pick data? This cannot be undone.")&&(U&&clearPickData(),Q=[],f.forEach(o=>{o.isAlreadyPicked=!1}),alert("All pick data has been cleared."),window.location.reload())}function be(o){const e=f.find(t=>t.name===o);return e?console.log(`Driver state for ${o}:`,{id:e.id,isAlreadyPicked:e.isAlreadyPicked,team:e.team,number:e.number}):console.log(`Driver ${o} not found`),e}function Ae(){confirm("Add test data for previous race picks?")&&(addTestPreviousRacePicks()?(alert("Test data added. Max Verstappen and Lando Norris were picked in previous races."),window.location.reload()):alert("Failed to add test data. Check console for errors."))}window.clearAllPicksData=Re;window.checkDriverState=be;window.simulatePreviousRacePicks=Ae;window.addTestPreviousRacePicks=async function(){try{console.log("🧪 Adding test previous race picks...");const{amplifyDataService:o}=await g(async()=>{const{amplifyDataService:e}=await import("./league-dashboard-BGSKMJy6.js").then(t=>t.h);return{amplifyDataService:e}},__vite__mapDeps([0,1]),import.meta.url);return await o.addTestPreviousRacePick(1,"Max Verstappen","Red Bull Racing","mon-2025","Monaco GP"),await o.addTestPreviousRacePick(7,"Lando Norris","McLaren","esp-2025","Spanish GP"),console.log("✅ Added test picks:"),console.log("  - Max Verstappen (Monaco GP)"),console.log("  - Lando Norris (Spanish GP)"),console.log(""),console.log("🧪 Now try to select these drivers - they should be BLOCKED!"),console.log("💡 Refresh the page and open the driver selection modal to test."),!0}catch(o){return console.error("❌ Failed to add test picks:",o),!1}};window.clearTestPreviousRacePicks=async function(){try{console.log("🧹 Cleaning up test previous race picks...");const{amplifyDataService:o}=await g(async()=>{const{amplifyDataService:n}=await import("./league-dashboard-BGSKMJy6.js").then(s=>s.h);return{amplifyDataService:n}},__vite__mapDeps([0,1]),import.meta.url),{authManager:e}=await g(async()=>{const{authManager:n}=await import("./league-dashboard-BGSKMJy6.js").then(s=>s.f);return{authManager:n}},__vite__mapDeps([0,1]),import.meta.url);if(!await e.getCurrentUser())return console.log("❌ Please sign in first"),!1;const i=(await o.getUserPicks()).filter(n=>n.raceId==="mon-2025"||n.raceId==="esp-2025");for(const n of i)await o.deleteUserPick(n.id);return console.log(`✅ Cleaned up ${i.length} test picks`),console.log("💡 Refresh the page to see the changes."),!0}catch(o){return console.error("❌ Failed to clean up test picks:",o),!1}};try{let o=function(){const n=Array.from(document.querySelector(".lights-row.row1").querySelectorAll(".light")),s=Array.from(document.querySelector(".lights-row.row2").querySelectorAll(".light")),r=[...n,...s];r.forEach(l=>{l.classList.remove("on"),anime.set(l,{scale:1,opacity:1})});const c=anime.timeline({easing:"easeInOutQuad"});for(let l=0;l<5;l++)c.add({targets:[n[l],s[l]],scale:[{value:.8,duration:100},{value:1.2,duration:300},{value:1,duration:200}],begin:function(d){n[l].classList.add("on"),s[l].classList.add("on")}},l*800);c.add({targets:r,scale:[1,.8],opacity:.5,duration:300,delay:anime.stagger(50),begin:function(){r.forEach(l=>l.classList.remove("on"))}},"+=2000"),c.finished.then(()=>{setTimeout(o,3e3)})};setTimeout(o,2e3);const e=document.querySelector(".grid-background");if(e){for(let n=0;n<v*v;n++){const s=document.createElement("div");s.className="grid-dot",s.style.width="2px",s.style.height="2px",s.style.background="var(--grid-color)",s.style.borderRadius="50%",e.appendChild(s)}document.addEventListener("mousemove",n=>{const s=e.getBoundingClientRect(),r=n.clientX-s.left,c=n.clientY-s.top;anime({targets:".grid-dot",scale:[{value:1},{value:1.5},{value:1}],duration:900,easing:"easeOutElastic(1, .5)",delay:anime.stagger(100,{grid:[v,v],from:Math.floor(c/(s.height/v))*v+Math.floor(r/(s.width/v))})})})}document.querySelectorAll(".animate-text").length>0&&anime.timeline({easing:"easeOutExpo"}).add({targets:".title span",opacity:[0,1],translateY:[20,0],duration:1200,delay:anime.stagger(200)}).add({targets:".description p",opacity:[0,1],translateY:[20,0],duration:800,delay:anime.stagger(100)},"-=800");const a=document.querySelector(".cta-button");a&&(a.addEventListener("mouseenter",()=>{anime({targets:a,scale:1.05,duration:300,easing:"easeOutElastic(1, .5)"})}),a.addEventListener("mouseleave",()=>{anime({targets:a,scale:1,duration:300,easing:"easeOutElastic(1, .5)"})}));const i=document.querySelector(".motion-path");if(i){const n=anime.setDashoffset(i);anime({targets:".motion-path",strokeDasharray:n,strokeDashoffset:[n,0],duration:3e3,easing:"easeInOutQuad",complete:function(){i.style.strokeDasharray="none"}});const s=anime.path(".motion-path");anime({targets:".car-dot",translateX:s("x"),translateY:s("y"),rotate:s("angle"),easing:"linear",duration:8e3,loop:!0}),anime({targets:".motion-path",strokeDashoffset:[anime.setDashoffset,0],easing:"linear",duration:4e3,loop:!0,direction:"alternate"})}}catch(o){console.error("Error in anime.js animations:",o)}window.testDeadlineManager=async()=>{const o=new R({debug:!1});o.initialize(),localStorage.removeItem("nextRaceData"),o.loadRaceData();const e=new Date(Date.now()+3e4);localStorage.setItem("nextRaceData",JSON.stringify({raceId:"test-race",pickDeadline:e.toISOString()})),o.initialize(),localStorage.setItem("nextRaceData",JSON.stringify({raceId:"test-race"})),o.loadRaceData()};console.log("app.js loaded - end");
