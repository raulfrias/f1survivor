const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./league-dashboard-Ni62b5cB.js","./league-dashboard-CBfSAJeM.css","./dashboard-utils-BLCRnluD.js","./race-results-api-BOSDOCeH.js"])))=>i.map(i=>d[i]);
import{g as ee,F as te,_ as L,l as R,a as ae,b as ne,i as ie,s as se,c as Q,d as T,e as oe,f as re}from"./league-dashboard-Ni62b5cB.js";class le{constructor(){this.states={COUNTDOWN:"countdown",RACE_LIVE:"race_live",POST_RACE:"post_race",NEXT_RACE:"next_race"},this.POST_RACE_DURATION=10*60*60*1e3}getCurrentState(e){if(!e||!e.raceDate)return this.states.COUNTDOWN;const t=new Date,n=new Date(e.raceDate),a=new Date(n.getTime()+this.POST_RACE_DURATION);if(t<n)return this.states.COUNTDOWN;if(t<a){const o=new Date(n.getTime()+72e5);return t<o?this.states.RACE_LIVE:this.states.POST_RACE}else return this.states.NEXT_RACE}getStateDisplay(e,t){switch(e){case this.states.RACE_LIVE:return"RACE IN PROGRESS";case this.states.POST_RACE:return"RACE FINISHED - Results Pending";case this.states.NEXT_RACE:return"Loading Next Race...";default:return t||""}}}class ce{constructor(e){this.containerEl=e,this.currentRaceData=null,this.countdownInterval=null,this.stateManager=new le}async initialize(){this.countdownInterval&&(clearInterval(this.countdownInterval),this.countdownInterval=null);try{if(await this.fetchNextRaceData(),!this.currentRaceData||!this.currentRaceData.raceId)throw new Error("Failed to load race data");return this.renderCountdown(),this.startCountdown(),window.addEventListener("storage",e=>{e.key==="nextRaceData"&&(console.log("Race data changed in localStorage, reinitializing..."),this.initialize())}),window.addEventListener("raceDataUpdated",()=>{console.log("Race data updated event received, reinitializing..."),this.initialize()}),this.currentRaceData}catch(e){throw console.error("Failed to initialize race countdown:",e),e}}async fetchNextRaceData(){try{const e=localStorage.getItem("nextRaceData");if(e){console.log("Found race data in localStorage:",JSON.parse(e)),this.currentRaceData=JSON.parse(e);return}console.log("No cached data found, checking for current race...");const t=this.getCurrentRace();if(t){console.log("Found current race in progress:",t.raceName);const a={raceId:t.id,meetingKey:t.round,raceName:t.raceName,raceDate:t.dateStart,qualifyingDate:this.calculateQualifyingDate(t.dateStart),raceCircuit:t.circuit,location:t.location,country:t.country,pickDeadline:t.dateStart};this.currentRaceData=a,localStorage.setItem("nextRaceData",JSON.stringify(a)),console.log("Current race data prepared and cached:",a);return}console.log("No current race found, fetching next race from calendar...");const n=ee();if(n){console.log("Found next race from calendar:",n.raceName);const a={raceId:n.id,meetingKey:n.round,raceName:n.raceName,raceDate:n.dateStart,qualifyingDate:this.calculateQualifyingDate(n.dateStart),raceCircuit:n.circuit,location:n.location,country:n.country,pickDeadline:n.dateStart};this.currentRaceData=a,localStorage.setItem("nextRaceData",JSON.stringify(a)),console.log("Race data prepared and cached:",a)}else console.log("No upcoming races found, loading fallback..."),this.loadFallbackRaceData()}catch(e){console.error("Error fetching race data:",e),this.loadFallbackRaceData()}}loadFallbackRaceData(){console.log("Loading fallback race data...");const e={raceId:"mon-2025",meetingKey:8,raceName:"Monaco GP",raceDate:"2025-05-25T13:00:00+00:00",qualifyingDate:"2025-05-25",raceCircuit:"Monaco",location:"Monaco",country:"Monaco",pickDeadline:"2025-05-25T12:00:00.000Z"};this.currentRaceData=e,localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("nextRaceDataTimestamp",Date.now().toString()),console.log("Fallback data loaded:",e)}renderCountdown(){if(!this.currentRaceData)return;const e=this.getCurrentRaceState(),t=e===this.stateManager.states.RACE_LIVE||e===this.stateManager.states.POST_RACE?"Race: ":"Next Race: ";this.containerEl.innerHTML=`
      <div class="race-info">
        <h3 class="race-name">${t}<span id="race-name">${this.currentRaceData.raceName}</span></h3>
      </div>
      <div class="countdown-timer">
        <div class="time-unit">
          <span id="days-value">00</span>
          <label>Days</label>
        </div>
        <div class="time-unit">
          <span id="hours-value">00</span>
          <label>Hours</label>
        </div>
        <div class="time-unit">
          <span id="minutes-value">00</span>
          <label>Minutes</label>
        </div>
        <div class="time-unit">
          <span id="seconds-value">00</span>
          <label>Seconds</label>
        </div>
      </div>
      <div class="pick-status" id="pick-status"></div>
    `}startCountdown(){this.currentRaceData&&(this.updateCountdown(),this.countdownInterval=setInterval(()=>{this.updateCountdown()},1e3))}isRaceInProgress(){if(!this.currentRaceData||!this.currentRaceData.raceDate)return!1;const e=new Date,t=new Date(this.currentRaceData.raceDate),n=new Date(t.getTime()+3*60*60*1e3);return e>=t&&e<=n}getCurrentRaceState(){return this.stateManager.getCurrentState(this.currentRaceData)}getCurrentRace(){const e=new Date,t=10*60*60*1e3;for(const n of te){const a=new Date(n.dateStart),o=new Date(a.getTime()+t);if(e>=a&&e<=o)return console.log(`Found current race: ${n.raceName} (${n.dateStart})`),n}return console.log("No current race found"),null}updateCountdown(){const e=this.getCurrentRaceState();if(e===this.stateManager.states.RACE_LIVE||e===this.stateManager.states.POST_RACE){document.getElementById("days-value").textContent="00",document.getElementById("hours-value").textContent="00",document.getElementById("minutes-value").textContent="00",document.getElementById("seconds-value").textContent="00";const t=document.getElementById("pick-status");t.textContent=this.stateManager.getStateDisplay(e),t.className=`pick-status ${e}`;const n=document.getElementById("make-pick-btn");n&&(n.disabled=!0,n.style.opacity="0.5",n.style.cursor="not-allowed")}else e===this.stateManager.states.NEXT_RACE?this.loadNextRace():(this.updateCountdownDisplay(),this.updatePickDeadlineStatus())}updateCountdownDisplay(){if(this.isRaceInProgress()){document.getElementById("days-value").textContent="00",document.getElementById("hours-value").textContent="00",document.getElementById("minutes-value").textContent="00",document.getElementById("seconds-value").textContent="00";const s=document.getElementById("pick-status");s.textContent="RACE IN PROGRESS",s.className="pick-status race-live";const r=document.getElementById("make-pick-btn");r&&(r.disabled=!0,r.style.opacity="0.5",r.style.cursor="not-allowed");return}const e=this.calculateTimeRemaining();document.getElementById("days-value").textContent=e.days.toString().padStart(2,"0"),document.getElementById("hours-value").textContent=e.hours.toString().padStart(2,"0"),document.getElementById("minutes-value").textContent=e.minutes.toString().padStart(2,"0"),document.getElementById("seconds-value").textContent=e.seconds.toString().padStart(2,"0");const t=new Date(this.currentRaceData.pickDeadline).getTime(),n=new Date().getTime(),a=t-n,o=document.getElementById("pick-status");a<=0?(o.textContent="Selection locked: Deadline has passed",o.className="pick-status deadline-passed"):a<=36e5?(o.textContent="Pick deadline approaching!",o.className="pick-status deadline-warning"):(o.textContent="",o.className="pick-status")}updatePickDeadlineStatus(){}loadNextRace(){}calculateTimeRemaining(){const e=new Date(this.currentRaceData.raceDate).getTime(),t=new Date().getTime(),n=e-t;return n<=0?{total:0,days:0,hours:0,minutes:0,seconds:0}:{total:n,days:Math.floor(n/(1e3*60*60*24)),hours:Math.floor(n%(1e3*60*60*24)/(1e3*60*60)),minutes:Math.floor(n%(1e3*60*60)/(1e3*60)),seconds:Math.floor(n%(1e3*60)/1e3)}}calculateQualifyingDate(e){const t=new Date(e);return new Date(t.getTime()-24*60*60*1e3).toISOString().split("T")[0]}destroy(){this.countdownInterval&&clearInterval(this.countdownInterval)}}const D={nextRaceData:{raceId:"monaco-2025",raceName:"Monaco Grand Prix 2025",qualifyingDate:"2025-05-25",pickDeadline:"2025-05-26T12:00:00Z",raceCircuit:"Circuit de Monaco"},qualifyingResults:{raceId:"monaco-2025",results:[{driverId:1,full_name:"Max Verstappen",position:1,team_name:"Red Bull Racing"},{driverId:16,full_name:"Charles Leclerc",position:2,team_name:"Ferrari"},{driverId:55,full_name:"Carlos Sainz",position:3,team_name:"Ferrari"},{driverId:11,full_name:"Sergio Perez",position:4,team_name:"Red Bull Racing"},{driverId:44,full_name:"Lewis Hamilton",position:5,team_name:"Mercedes"},{driverId:63,full_name:"George Russell",position:6,team_name:"Mercedes"},{driverId:81,full_name:"Oscar Piastri",position:7,team_name:"McLaren"},{driverId:4,full_name:"Lando Norris",position:8,team_name:"McLaren"},{driverId:14,full_name:"Fernando Alonso",position:9,team_name:"Aston Martin"},{driverId:18,full_name:"Lance Stroll",position:10,team_name:"Aston Martin"},{driverId:23,full_name:"Alex Albon",position:11,team_name:"Williams"},{driverId:3,full_name:"Daniel Ricciardo",position:12,team_name:"Racing Bulls"},{driverId:22,full_name:"Yuki Tsunoda",position:13,team_name:"Racing Bulls"},{driverId:77,full_name:"Valtteri Bottas",position:14,team_name:"Kick Sauber"},{driverId:27,full_name:"Nico Hulkenberg",position:15,team_name:"Kick Sauber"},{driverId:31,full_name:"Esteban Ocon",position:16,team_name:"Alpine"},{driverId:10,full_name:"Pierre Gasly",position:17,team_name:"Alpine"},{driverId:2,full_name:"Logan Sargeant",position:18,team_name:"Williams"},{driverId:20,full_name:"Kevin Magnussen",position:19,team_name:"Haas F1 Team"},{driverId:24,full_name:"Zhou Guanyu",position:20,team_name:"Haas F1 Team"}],timestamp:new Date().toISOString()}},de={simulateQualiDone(){localStorage.clear();const i=new Date,e={...D.nextRaceData,qualifyingDate:new Date(i.getTime()-2*60*60*1e3).toISOString(),pickDeadline:new Date(i.getTime()+10*60*60*1e3).toISOString(),raceDate:new Date(i.getTime()+24*60*60*1e3).toISOString()};localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("qualifyingResults",JSON.stringify(D.qualifyingResults)),console.log("✓ Test Case 1: Post-Qualifying State (Pre-Deadline)"),console.log("- Qualifying completed 2 hours ago"),console.log("- Pick deadline is 10 hours from now"),console.log("- Race starts in 24 hours"),console.log("- P15 (Hulkenberg) should be available"),console.log("- Pick button should be enabled"),window.location.reload()},simulateSomePicks(){localStorage.clear();const i=new Date,e={...D.nextRaceData,raceName:"Monaco Grand Prix 2025",qualifyingDate:new Date(i.getTime()-24*60*60*1e3).toISOString(),pickDeadline:new Date(i.getTime()-2*60*60*1e3).toISOString(),raceDate:new Date(i.getTime()-30*60*1e3).toISOString()};localStorage.setItem("nextRaceData",JSON.stringify(e)),localStorage.setItem("qualifyingResults",JSON.stringify(D.qualifyingResults)),localStorage.setItem("f1survivor_user_picks",JSON.stringify({userId:"test-user",currentSeason:"2025",picks:[{driverId:27},{driverId:31}]})),console.log("✓ Test Case 2: Race In Progress"),console.log("- Race started 30 minutes ago"),console.log("- Timer should show zeros"),console.log('- Status should show "RACE IN PROGRESS"'),console.log("- P15 (Hulkenberg) and P16 (Ocon) already picked"),console.log("- Auto-picked P17 (Gasly)"),console.log("- Pick button should be disabled"),window.location.reload()},simulateDeadlinePassed(){const i={...D.nextRaceData,pickDeadline:new Date(Date.now()-1e3).toISOString()};localStorage.clear(),localStorage.setItem("nextRaceData",JSON.stringify(i)),localStorage.setItem("qualifyingResults",JSON.stringify(D.qualifyingResults)),console.log("✓ Test Case 3: Deadline Passed"),console.log("- Pick deadline has passed"),console.log("- Pick button should be disabled"),console.log("- Should show deadline passed message"),window.location.reload()},reset(){localStorage.clear(),console.log("✓ Reset: Cleared all test data"),console.log("- App should return to default pre-qualifying state"),window.location.reload()}};(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")&&document.addEventListener("DOMContentLoaded",()=>{console.log(`
Monaco 2025 Test Scenarios Ready!

To run scenarios manually, use:
1. TestScenarios.simulateQualiDone()     - Test just after qualifying
2. TestScenarios.simulateSomePicks()      - Test with P15/P16 already picked
3. TestScenarios.simulateDeadlinePassed() - Test deadline passed
4. TestScenarios.reset()                  - Reset to default

Example:
TestScenarios.simulateQualiDone();
`)});(window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1")&&(window.TestScenarios=de,window.mockMonacoData=D);class ue{constructor(){this.testResults=[],console.log("🧪 Post-Race Test Suite Initialized"),console.log("🏁 Testing Spanish GP → Canadian GP Transition")}async runAllTests(){console.log(`
========== POST-RACE TESTING SUITE ==========`);try{await this.testRaceResultsAPI(),await this.testSurvivalCalculations(),await this.testRaceTransitions(),await this.testSystemReset(),this.printTestSummary()}catch(e){console.error("❌ Test suite failed:",e)}}async testRaceResultsAPI(){console.log(`
🔍 TEST 1: OpenF1 API Race Results Availability`);try{const{fetchRaceResults:e,calculateSurvivalStatus:t}=await L(async()=>{const{fetchRaceResults:o,calculateSurvivalStatus:s}=await import("./race-results-api-BOSDOCeH.js");return{fetchRaceResults:o,calculateSurvivalStatus:s}},[],import.meta.url);console.log("  📡 Testing mock race results...");const a=await e("esp-2025-race");if(a&&a.positions)console.log(`  ✅ Mock race results fetched: ${a.positions.length} drivers`),console.log(`  🏆 Winner: ${a.positions[0].full_name}`),console.log(`  📊 P15: ${a.positions[14].full_name}`),console.log(`  📊 P16: ${a.positions[15].full_name}`),this.testResults.push({test:"Race Results API - Mock",status:"PASS"});else throw new Error("Failed to fetch mock race results");console.log("  📡 Testing real OpenF1 race results API...");try{const s=await(await fetch("https://api.openf1.org/v1/sessions?session_name=Race&year=2025")).json();if(console.log(`  📊 Found ${s.length} race sessions in 2025`),s.length>0){const r=s[s.length-1];console.log(`  🏁 Latest race session: ${r.location} (${r.session_key})`),this.testResults.push({test:"Race Results API - Real",status:"PASS"})}else console.log("  ⚠️  No race sessions found yet (expected during live race)"),this.testResults.push({test:"Race Results API - Real",status:"SKIP"})}catch(o){console.log("  ⚠️  OpenF1 API error (expected during live race):",o.message),this.testResults.push({test:"Race Results API - Real",status:"SKIP"})}}catch(e){console.error("  ❌ Race Results API test failed:",e),this.testResults.push({test:"Race Results API",status:"FAIL"})}}async testSurvivalCalculations(){console.log(`
🧮 TEST 2: Survival Calculation Logic`);try{const{calculateSurvivalStatus:e,isPlayerAlive:t,calculateSurvivalRate:n,getPicksWithResults:a}=await L(async()=>{const{calculateSurvivalStatus:f,isPlayerAlive:m,calculateSurvivalRate:C,getPicksWithResults:X}=await import("./race-results-api-BOSDOCeH.js");return{calculateSurvivalStatus:f,isPlayerAlive:m,calculateSurvivalRate:C,getPicksWithResults:X}},[],import.meta.url),o=[{raceId:"esp-2025",raceName:"Spanish GP",driverId:55,driverName:"Carlos Sainz",pickDate:"2025-06-01T12:00:00.000Z"}],s={session_key:"esp-2025-race",session_name:"Race",location:"Barcelona",positions:[{position:1,driver_number:1,full_name:"Max Verstappen",team_name:"Red Bull Racing"},{position:2,driver_number:4,full_name:"Lando Norris",team_name:"McLaren"},{position:3,driver_number:16,full_name:"Charles Leclerc",team_name:"Ferrari"},{position:15,driver_number:55,full_name:"Carlos Sainz",team_name:"Williams"},{position:16,driver_number:23,full_name:"Alexander Albon",team_name:"Williams"}]},r=o[0],l=e(r,s);if(console.log(`  🎯 User picked: ${r.driverName} (#${r.driverId})`),console.log(`  🏁 Race result: ${l.position} - ${l.status}`),l.status==="ELIMINATED"&&l.position==="P15")console.log("  ✅ Survival calculation correct: P15 = ELIMINATED"),this.testResults.push({test:"Survival Calculation",status:"PASS"});else throw new Error(`Unexpected survival status: ${l.status}`);console.log("  📊 Testing multiple picks scenario...");const d=[{raceId:"bhr-2025",driverId:4,survivalStatus:{status:"SURVIVED",position:"P2"}},{raceId:"sau-2025",driverId:27,survivalStatus:{status:"SURVIVED",position:"P10"}},{raceId:"esp-2025",driverId:55,survivalStatus:{status:"ELIMINATED",position:"P15"}}],c=t(d),u=n(d);if(console.log(`  👤 Player status: ${c?"ALIVE":"ELIMINATED"}`),console.log(`  📈 Survival rate: ${u}%`),!c&&u===67)console.log("  ✅ Multi-pick survival calculation correct"),this.testResults.push({test:"Multi-Pick Survival",status:"PASS"});else throw new Error(`Unexpected multi-pick results: alive=${c}, rate=${u}`)}catch(e){console.error("  ❌ Survival calculation test failed:",e),this.testResults.push({test:"Survival Calculation",status:"FAIL"})}}async testRaceTransitions(){console.log(`
🔄 TEST 3: Race Transition Logic`);try{console.log("  ⏰ Simulating post-race state transition...");const e=localStorage.getItem("nextRaceData"),t=localStorage.getItem("qualifyingResults"),n=new Date("2025-06-01T23:00:00+00:00"),a=new Date(n.getTime()+1e3),o=Date.now;Date.now=()=>a.getTime(),console.log(`  📅 Simulated time: ${a.toISOString()}`),console.log("  🔄 Testing race transition...");const{getNextRace:s,F1_2025_CALENDAR:r}=await L(async()=>{const{getNextRace:d,F1_2025_CALENDAR:c}=await import("./league-dashboard-Ni62b5cB.js").then(u=>u.r);return{getNextRace:d,F1_2025_CALENDAR:c}},__vite__mapDeps([0,1]),import.meta.url),l=s(a);if(l&&l.raceName==="Canadian GP")console.log(`  ✅ Next race correctly identified: ${l.raceName}`),console.log(`  📅 Canadian GP date: ${l.dateStart}`),this.testResults.push({test:"Race Transition",status:"PASS"});else throw new Error(`Expected Canadian GP, got: ${l==null?void 0:l.raceName}`);console.log("  🗑️  Testing cache invalidation..."),localStorage.removeItem("qualifyingResults"),localStorage.removeItem("nextRaceData"),console.log("  ✅ Spanish GP cache cleared"),console.log("  🔄 System ready for Canadian GP"),Date.now=o,e&&localStorage.setItem("nextRaceData",e),t&&localStorage.setItem("qualifyingResults",t),this.testResults.push({test:"Cache Invalidation",status:"PASS"})}catch(e){console.error("  ❌ Race transition test failed:",e),this.testResults.push({test:"Race Transition",status:"FAIL"})}}async testSystemReset(){console.log(`
🔄 TEST 4: System Reset for Canadian GP`);try{console.log("  📊 Testing dashboard reset...");const{getDashboardData:e,calculateDashboardStats:t}=await L(async()=>{const{getDashboardData:s,calculateDashboardStats:r}=await import("./dashboard-utils-BLCRnluD.js");return{getDashboardData:s,calculateDashboardStats:r}},__vite__mapDeps([2,0,1,3]),import.meta.url),a=t([{raceId:"bhr-2025",raceName:"Bahrain GP",driverId:4,driverName:"Lando Norris",survivalStatus:{status:"SURVIVED",position:"P2"}},{raceId:"esp-2025",raceName:"Spanish GP",driverId:55,driverName:"Carlos Sainz",survivalStatus:{status:"ELIMINATED",position:"P15"}}]);if(console.log("  📈 Dashboard stats calculated:"),console.log(`    - Picks used: ${a.picksUsed}/20`),console.log(`    - Races completed: ${a.racesCompleted}/24`),console.log(`    - Player status: ${a.playerStatus}`),console.log(`    - Survival rate: ${a.survivalRate}%`),a.playerStatus==="ELIMINATED"&&a.survivalRate===50)console.log("  ✅ Dashboard stats correct after elimination"),this.testResults.push({test:"Dashboard Reset",status:"PASS"});else throw new Error(`Unexpected dashboard stats: ${a.playerStatus}, ${a.survivalRate}%`);console.log("  🏁 Testing Canadian GP preparation...");const o={raceId:"can-2025",raceName:"Canadian GP",raceDate:"2025-06-15T18:00:00+00:00",qualifyingDate:"2025-06-14",location:"Montreal"};console.log(`  📅 Next race: ${o.raceName}`),console.log(`  📍 Location: ${o.location}`),console.log(`  🏎️  Qualifying: ${o.qualifyingDate}`),console.log("  ✅ Canadian GP data prepared"),this.testResults.push({test:"Next Race Preparation",status:"PASS"})}catch(e){console.error("  ❌ System reset test failed:",e),this.testResults.push({test:"System Reset",status:"FAIL"})}}printTestSummary(){console.log(`
========== TEST SUMMARY ==========`);const e=this.testResults.filter(a=>a.status==="PASS").length,t=this.testResults.filter(a=>a.status==="FAIL").length,n=this.testResults.filter(a=>a.status==="SKIP").length;console.log(`✅ PASSED: ${e}`),console.log(`❌ FAILED: ${t}`),console.log(`⏭️  SKIPPED: ${n}`),console.log(`
Detailed Results:`),this.testResults.forEach(a=>{const o=a.status==="PASS"?"✅":a.status==="FAIL"?"❌":"⏭️";console.log(`  ${o} ${a.test}: ${a.status}`)}),t===0?(console.log(`
🎉 ALL CRITICAL TESTS PASSED!`),console.log("📝 Post-race functionality ready for production")):console.log(`
⚠️  Some tests failed - review before production`)}static simulateRaceFinished(){console.log("🏁 Simulating Spanish GP race finished..."),localStorage.removeItem("nextRaceData"),localStorage.removeItem("qualifyingResults"),window.dispatchEvent(new CustomEvent("raceDataUpdated")),console.log("✅ Race finished simulation complete"),console.log("🔄 System should now show Canadian GP countdown")}static simulatePostRaceResults(){console.log("📊 Simulating Spanish GP race results...");const e={session_key:"esp-2025-race",session_name:"Race",location:"Barcelona",date:"2025-06-01",positions:[{position:1,driver_number:1,full_name:"Max Verstappen",team_name:"Red Bull Racing"},{position:2,driver_number:4,full_name:"Lando Norris",team_name:"McLaren"},{position:3,driver_number:16,full_name:"Charles Leclerc",team_name:"Ferrari"},{position:4,driver_number:55,full_name:"Carlos Sainz",team_name:"Williams"},{position:5,driver_number:63,full_name:"George Russell",team_name:"Mercedes"},{position:6,driver_number:44,full_name:"Lewis Hamilton",team_name:"Mercedes"},{position:7,driver_number:11,full_name:"Sergio Perez",team_name:"Red Bull Racing"},{position:8,driver_number:14,full_name:"Fernando Alonso",team_name:"Aston Martin"},{position:9,driver_number:18,full_name:"Lance Stroll",team_name:"Aston Martin"},{position:10,driver_number:81,full_name:"Oscar Piastri",team_name:"McLaren"},{position:11,driver_number:27,full_name:"Nico Hulkenberg",team_name:"Kick Sauber"},{position:12,driver_number:20,full_name:"Kevin Magnussen",team_name:"Haas"},{position:13,driver_number:10,full_name:"Pierre Gasly",team_name:"Alpine"},{position:14,driver_number:31,full_name:"Esteban Ocon",team_name:"Alpine"},{position:15,driver_number:23,full_name:"Alexander Albon",team_name:"Williams"},{position:16,driver_number:2,full_name:"Logan Sargeant",team_name:"Williams"},{position:17,driver_number:77,full_name:"Valtteri Bottas",team_name:"Kick Sauber"},{position:18,driver_number:24,full_name:"Zhou Guanyu",team_name:"Kick Sauber"},{position:19,driver_number:22,full_name:"Yuki Tsunoda",team_name:"RB"},{position:20,driver_number:3,full_name:"Daniel Ricciardo",team_name:"RB"}]};localStorage.setItem("raceResults_esp-2025",JSON.stringify({results:e,timestamp:new Date().toISOString()})),console.log("✅ Mock Spanish GP results cached"),console.log(`🏆 Winner: ${e.positions[0].full_name}`),console.log(`📊 P15-P16: ${e.positions[14].full_name}, ${e.positions[15].full_name}`)}}window.PostRaceTestSuite=ue;typeof window<"u"&&(console.log("🧪 Post-Race Test Suite Loaded"),console.log("📋 Available commands:"),console.log("  - new PostRaceTestSuite().runAllTests()"),console.log("  - PostRaceTestSuite.simulateRaceFinished()"),console.log("  - PostRaceTestSuite.simulatePostRaceResults()"));function E(){const i=R.getActiveLeagueId();if(!i)return{isLeagueMode:!1,leagueId:null,league:null};const e=R.getLeague(i);return{isLeagueMode:!0,leagueId:i,league:e}}async function ge(i,e){const t=E();return t.isLeagueMode?(console.log(`Saving pick to league: ${t.league.leagueName}`),R.saveLeaguePick(t.leagueId,i,e)):(console.log("Saving pick in solo mode"),se(i,e))}function U(){const i=E();return i.isLeagueMode?(console.log(`Loading picks from league: ${i.league.leagueName}`),R.loadLeaguePicks(i.leagueId)):(console.log("Loading picks in solo mode"),ne())}function me(i){const e=E();return e.isLeagueMode?R.isDriverAlreadyPickedInLeague(i,e.leagueId):ie(i)}function h(){const i=E();return i.isLeagueMode?R.getCurrentRacePickForLeague(i.leagueId):ae()}function fe(){const i=E(),e=document.querySelector(".league-indicator");if(e&&e.remove(),i.isLeagueMode){const t=document.querySelector("#driver-selection-screen .modal-header");if(t){const a=document.createElement("div");a.className="league-indicator",a.innerHTML=`
        <span class="indicator-label">League:</span>
        <span class="indicator-value">${i.league.leagueName}</span>
      `,t.appendChild(a)}const n=document.querySelector(".hero-section");if(n){const a=document.createElement("div");a.className="league-indicator main-page",a.innerHTML=`
        <span>Playing in: <strong>${i.league.leagueName}</strong></span>
      `,n.appendChild(a)}}}function z(){fe();const i=E();i.isLeagueMode?console.log(`League mode active: ${i.league.leagueName}`):console.log("Solo mode active")}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",z):z();class w{constructor(e={}){this.raceData=null,this.deadlineInterval=null,this.onDeadlineApproaching=null,this.onDeadlinePassed=null,this.debug=e.debug||!1}log(e,t,n={}){(e==="error"||this.debug&&["debug","info"].includes(e))&&console.log({component:"PickDeadlineManager",timestamp:new Date().toISOString(),level:e,message:t,data:n})}setDebug(e){this.debug=e}initialize(e={}){return this.log("debug","PickDeadlineManager initializing..."),this.deadlineInterval&&(this.log("debug","Clearing existing deadlineInterval.",{intervalId:this.deadlineInterval}),clearInterval(this.deadlineInterval),this.deadlineInterval=null),this.callbacks=e,this.loadRaceData(),!this.raceData||!this.raceData.pickDeadline?(this.log("warn","No race data or pick deadline available for PickDeadlineManager."),!1):(this.onDeadlineApproaching=e.onDeadlineApproaching,this.onDeadlinePassed=e.onDeadlinePassed,this.checkDeadline())}loadRaceData(){try{const e=localStorage.getItem("nextRaceData");if(!e){this.log("debug","No race data found");return}const t=JSON.parse(e);if(!t.pickDeadline){this.log("debug","No deadline configured");return}this.raceData=t,this.log("debug","Race data loaded",{raceId:this.raceData.raceId})}catch(e){this.log("error","Failed to load race data",{error:e.message})}}checkDeadline(){if(!this.raceData||!this.raceData.pickDeadline)return this.log("debug","Cannot check deadline without race data or pick deadline."),!1;const e=new Date,n=new Date(this.raceData.pickDeadline)-e;if(n<=0)return this.log("info","Pick deadline has passed.",{deadline:this.raceData.pickDeadline}),this.onDeadlinePassed&&this.onDeadlinePassed(),this.deadlineInterval&&(clearInterval(this.deadlineInterval),this.deadlineInterval=null),!0;if(this.deadlineInterval||(this.deadlineInterval=setInterval(()=>this.checkDeadline(),1e3),this.log("debug","Deadline check interval started.",{intervalId:this.deadlineInterval})),n<36e5&&this.onDeadlineApproaching){const a=Math.floor(n/36e5),o=Math.floor(n%36e5/6e4),s=Math.floor(n%6e4/1e3);this.onDeadlineApproaching({hours:a,minutes:o,seconds:s})}return!1}isDeadlinePassed(){if(!this.raceData||!this.raceData.pickDeadline)return console.log("Cannot check deadline without race data or pick deadline"),!1;const e=new Date,t=new Date(this.raceData.pickDeadline);return e>=t}}typeof window<"u"&&(window.PickDeadlineManager=w);class he{constructor(e,t=!1){this.component=e,this.debug=t,this.isProduction=window.location.hostname==="f1survivor.com"}log(e,t,n=null){const a={component:this.component,timestamp:new Date().toISOString(),level:e,message:t,...n&&{data:n}};if(!this.isProduction||e==="error"){const o=JSON.parse(sessionStorage.getItem("f1survivor_logs")||"[]");o.push(a),o.length>100&&o.shift(),sessionStorage.setItem("f1survivor_logs",JSON.stringify(o))}this.isProduction?e==="error"?console.error(a):e==="warn"&&!t.includes("future date")&&console.warn(a):(e==="error"||this.debug&&["warn","info","debug"].includes(e))&&console[e==="debug"?"log":e](a)}}class pe{constructor(){this.logger=new he("QualifyingResultsManager"),this.maxRetries=3,this.retryDelay=2e3,this.qualifyingResults=null,this.raceData=null,this.debug=!0,this._isInitialized=!1}log(e,t,n=null){if(!this.debug&&e==="debug")return;const a={component:"QualifyingResultsManager",timestamp:new Date().toISOString(),level:e,message:t,...n&&{data:n}};switch(e){case"error":console.error(a);break;case"warn":console.warn(a);break;case"debug":console.debug(a);break;default:console.log(a)}}async initialize(){if(this.loadRaceData(),!this.raceData||!this.raceData.qualifyingDate){this.log("warn","Cannot initialize QRM fully: raceData or raceData.qualifyingDate is missing. Will rely on explicit fetch for auto-pick or other direct calls."),this._isInitialized=!1;return}await this.fetchQualifyingResults(this.raceData.qualifyingDate),this._isInitialized=!0,this.log("debug","QualifyingResultsManager initialized.")}isInitialized(){return this._isInitialized}loadRaceData(){const e=localStorage.getItem("nextRaceData");e?(this.raceData=JSON.parse(e),this.log("debug","Race data loaded",this.raceData)):this.log("warn","No race data available")}_processResults(e,t){return e&&Array.isArray(e)&&e.length>0?(this.qualifyingResults=e.map(n=>({...n,driverId:parseInt(n.driver_number)})),localStorage.setItem("qualifyingResults",JSON.stringify({raceId:t,results:this.qualifyingResults,timestamp:new Date().toISOString()})),this.log("debug","Qualifying results processed and cached",{raceId:t,count:this.qualifyingResults.length}),this.qualifyingResults):(this.log("warn","No results to process or results are not an array",e),this.qualifyingResults=[],[])}async fetchWithRetry(e,t=this.maxRetries){for(let n=0;n<t;n++)try{const a={method:"GET",headers:{Accept:"application/json"}},o=e.includes("api.openf1.org")?e:e.includes("?")?`${e}&_t=${Date.now()}`:`${e}?_t=${Date.now()}`;this.log("debug",`Fetching URL: ${o}`);const s=await fetch(o,a);if(s.ok)return await s.json();if(s.status===404)return null;throw new Error(`HTTP ${s.status}: ${s.statusText}`)}catch(a){if(this.log("warn",`Attempt ${n+1} failed for ${e}:`,a.message),n<t-1)await new Promise(o=>setTimeout(o,this.retryDelay));else throw a}}async fetchQualifyingResults(e){if(e===void 0)return this.log("debug","fetchQualifyingResults called with undefined date. Using fallback."),this.qualifyingResults=this.getFallbackDriver(),this.qualifyingResults;const t=new Date(e),n=new Date;if(this.log("debug",`Date comparison: requestDate=${t.toISOString()}, now=${n.toISOString()}, isFuture=${t>n}`),t>n)return this.log("debug",`Race date ${e} is in the future (${t.toISOString()} > ${n.toISOString()}). Using fallback instead of fetching from OpenF1 API.`),this.qualifyingResults=this.getFallbackDriver(),this.qualifyingResults;try{const a=localStorage.getItem("qualifyingResults");if(a){const o=JSON.parse(a);if(this.raceData&&o.raceId===this.raceData.raceId)if(Date.now()-new Date(o.timestamp).getTime()>60*60*1e3&&t<=n)this.log("debug","Cached qualifying data is stale, fetching fresh data"),localStorage.removeItem("qualifyingResults");else return this.log("debug","Using cached qualifying results"),this.qualifyingResults=o.results,this.qualifyingResults;else this.log("debug","Cache race ID mismatch, clearing cache"),localStorage.removeItem("qualifyingResults")}if(t<=n){const o=await this.fetchFromOpenF1API(e);return!o||o.length===0?(this.log("debug","Using fallback driver (no data available)"),this.getFallbackDriver()):this._processResults(o,this.raceData?this.raceData.raceId:"unknown_race")}else return this.log("debug","Using fallback for future race"),this.getFallbackDriver()}catch(a){return this.log("error","Error fetching qualifying results",a),this.getFallbackDriver()}}async fetchFromOpenF1API(e){try{const t=e.split("-")[0];this.log("debug",`Fetching qualifying data from OpenF1 API for date: ${e}, year: ${t}`),this.log("debug","Searching for recent qualifying sessions...");const a=await this.fetchWithRetry("https://api.openf1.org/v1/sessions?session_name=Qualifying");if(this.log("debug","API response for all qualifying sessions:",{isArray:Array.isArray(a),length:a?a.length:"null/undefined",type:typeof a,firstFewChars:a?JSON.stringify(a).substring(0,200):"null",actualValue:a}),a&&a.length>0){this.log("debug",`Found ${a.length} total qualifying sessions`);const l=a.slice(-5);this.log("debug","Recent qualifying sessions:",l.map(c=>({session_key:c.session_key,location:c.location,date_start:c.date_start,year:c.year})));const d=a.find(c=>c.date_start&&c.date_start.startsWith(e));if(d){this.log("debug",`Found qualifying session: ${d.session_key} at ${d.location}`);const c=await this.fetchSessionData(d.session_key);if(c&&c.length>0)return c;this.log("debug",`Session ${d.session_key} found but no qualifying data returned`)}else{this.log("debug",`No session found with date_start starting with: ${e}`);const c=a.filter(u=>u.year===2025);this.log("debug",`Found ${c.length} sessions for 2025:`,c.map(u=>({session_key:u.session_key,location:u.location,date_start:u.date_start})))}}else this.log("debug","allSessions is empty or null/undefined");this.log("debug",`No session found for ${e}, trying year-based search...`);const o=`https://api.openf1.org/v1/sessions?year=${t}&session_name=Qualifying`,s=await this.fetchWithRetry(o);if(this.log("debug","Year-based API response:",{isArray:Array.isArray(s),length:s?s.length:"null/undefined",type:typeof s,actualValue:s}),!s||s.length===0)return this.log("debug","No qualifying sessions found for year",t),[];const r=s.find(l=>l.date_start&&l.date_start.startsWith(e));return r?(this.log("debug",`Found qualifying session: ${r.session_key} at ${r.location}`),await this.fetchSessionData(r.session_key)):(this.log("debug",`No qualifying session found starting on ${e}`),[])}catch(t){return this.log("error","Error fetching from OpenF1 API",t),[]}}async fetchSessionData(e){try{const t=`https://api.openf1.org/v1/drivers?session_key=${e}`,n=await this.fetchWithRetry(t);if(!n||n.length===0)return this.log("debug","No drivers found for session",e),[];const a=`https://api.openf1.org/v1/laps?session_key=${e}`,o=await this.fetchWithRetry(a);if(!o||o.length===0)return this.log("debug","No lap data found for session",e),[];const s=this.calculateQualifyingOrder(n,o);return this.log("debug",`Processed ${s.length} drivers from OpenF1 API for session ${e}`),s}catch(t){return this.log("error","Error fetching session data",t),[]}}calculateQualifyingOrder(e,t){const n={};t.forEach(o=>{if(o.lap_duration&&o.driver_number){const s=n[o.driver_number];(!s||o.lap_duration<s.lap_duration)&&(n[o.driver_number]=o)}});const a=e.map(o=>{const s=n[o.driver_number];return{driver_number:o.driver_number,full_name:o.full_name,team_name:o.team_name,lap_duration:s?s.lap_duration:null}});return a.sort((o,s)=>o.lap_duration===null&&s.lap_duration===null?0:o.lap_duration===null?1:s.lap_duration===null?-1:o.lap_duration-s.lap_duration),a.forEach((o,s)=>{o.position=s+1}),a}getFallbackDriver(){var a,o,s;const e=[{driverId:27,driverName:"Nico Hulkenberg",position:15,teamName:"Kick Sauber"},{driverId:31,driverName:"Esteban Ocon",position:15,teamName:"Haas F1 Team"},{driverId:5,driverName:"Gabriel Bortoleto",position:15,teamName:"Kick Sauber"},{driverId:87,driverName:"Oliver Bearman",position:15,teamName:"Haas F1 Team"}];if((o=(a=this.raceData)==null?void 0:a.qualifyingDate)!=null&&o.startsWith("2025"))return this.log("debug","Using Hulkenberg as fallback for 2025 season"),[e[0]];const n=((s=this.raceData)!=null&&s.raceId?this.raceData.raceId.split("-")[0].length:0)%e.length;return this.log("debug","Using fallback driver"),[e[n]]}getIntelligentFallback(){var a;const e={Monaco:[27,20,31],Silverstone:[23,77,18]},t=(a=this.raceData)==null?void 0:a.raceCircuit,n=e[t]||[20,31,27,18];for(const o of n)if(!this.isDriverPicked(o)){const s=this.getDriverInfo(o);return[{driverId:o,driverName:(s==null?void 0:s.name)||`Driver ${o}`,position:15,teamName:(s==null?void 0:s.team)||"Unknown Team"}]}return this.getFallbackDriver()}isDriverPicked(e){const t=localStorage.getItem("f1survivor_user_picks");return t?(JSON.parse(t).picks||[]).some(a=>a.driverId===e):!1}getNextAvailablePosition(e=15){if(!this.qualifyingResults||!Array.isArray(this.qualifyingResults)||this.qualifyingResults.length===0)return this.log("warn","Qualifying results not available or not an array for getNextAvailablePosition"),null;for(let t=e+1;t<=20;t++){const n=this.qualifyingResults.find(a=>a.position===t);if(n&&!this.isDriverPicked(n.driverId))return{driverId:n.driverId,driverName:n.full_name,position:t,teamName:n.team_name}}for(let t=e-1;t>=1;t--){const n=this.qualifyingResults.find(a=>a.position===t);if(n&&!this.isDriverPicked(n.driverId))return{driverId:n.driverId,driverName:n.full_name,position:t,teamName:n.team_name}}return null}getAutoPick(){if(!this.qualifyingResults||!Array.isArray(this.qualifyingResults)||this.qualifyingResults.length===0)return this.log("warn","Qualifying results not available or not an array for getAutoPick"),this.getFallbackDriver()[0];const e=this.qualifyingResults.find(t=>t.position===15);return e&&!this.isDriverPicked(e.driverId)?{driverId:e.driverId,driverName:e.full_name,teamName:e.team_name,position:e.position}:this.getNextAvailablePosition(15)}}class ye{constructor(){this.qualifyingManager=new pe,this.raceData=null,this.debug=!0}log(e,t,n=null){if(!this.debug&&e==="debug")return;const a={component:"AutoPickManager",timestamp:new Date().toISOString(),level:e,message:t,...n&&{data:n}};switch(e){case"error":console.error(a);break;case"warn":console.warn(a);break;case"debug":console.debug(a);break;default:console.log(a)}}async initialize(){window.addEventListener("triggerAutoPick",this.handleAutoPickTrigger.bind(this)),this.log("debug","AutoPickManager event listener for triggerAutoPick registered.");const e=localStorage.getItem("nextRaceData");e?(this.currentRaceData=JSON.parse(e),this.log("debug","AutoPickManager context: Race data loaded from localStorage",this.currentRaceData)):this.log("warn","AutoPickManager context: No nextRaceData found in localStorage during initialization."),this.qualifyingManager.isInitialized()||await this.qualifyingManager.initialize()}loadRaceData(){const e=localStorage.getItem("nextRaceData");e?(this.raceData=JSON.parse(e),this.log("debug","Race data loaded",this.raceData)):this.log("warn","No race data available")}async handleAutoPickTrigger(e){const t=e.detail.raceId;this.log("debug","handleAutoPickTrigger called for raceId:",t);const n=this.getNextRaceData();if(!n){this.log("error","No raceData found for auto-pick trigger. Ensure nextRaceData is in localStorage.");return}const a=n.raceId===t?n.raceName:"Selected Race",s=this.loadUserPicks().find(r=>r.raceId===t);if(s){this.log("debug","User already has a pick for this race, no auto-pick needed.",s);return}this.log("info",`No pick found for race ${t}. Proceeding with auto-pick.`),await this.applyAutoPick(t,a)}async applyAutoPick(e,t){this.log("debug","Applying auto-pick logic for race:",{raceId:e,raceName:t}),this.log("debug","Forcing refresh of qualifying results to get latest completed session for auto-pick.");try{const a=this.getNextRaceData(),o=a==null?void 0:a.qualifyingDate;o?await this.qualifyingManager.fetchQualifyingResults(o):this.log("warn","No qualifying date available for auto-pick, using existing data")}catch(a){this.log("error","Failed to fetch latest qualifying results for auto-pick.",a),this.showAutopickNotification({error:"Could not fetch latest qualifying data to perform auto-pick."});return}const n=this.qualifyingManager.getAutoPick();if(n&&n.driverId){const a={driverId:n.driverId,raceId:e,raceName:t,driverName:n.driverName,position:n.position,teamName:n.teamName,timestamp:new Date().toISOString(),isAutoPick:!0};let o=JSON.parse(localStorage.getItem("f1survivor_user_picks")||'{"userId":"local-user","currentSeason":"2025","picks":[]}');o.picks=(o.picks||[]).filter(s=>s.raceId!==e),o.picks.push(a),localStorage.setItem("f1survivor_user_picks",JSON.stringify(o)),this.log("debug","Auto-pick saved",a),this.showAutopickNotification(a),this.updateDriverSelectionUI(a)}else this.log("warn","Could not determine a driver for auto-pick.",{raceId:e}),this.showAutopickNotification({error:"Could not determine a suitable driver for auto-pick.",raceName:t})}showAutopickNotification(e){const t=document.createElement("div");t.classList.add("auto-pick-notification"),t.innerHTML=`
            <div class="auto-pick-header">
                <h3>Auto-Pick Applied</h3>
                <button id="dismiss-autopick" class="close-btn">×</button>
            </div>
            <div class="auto-pick-content">
                <p>You didn't select a driver before the deadline. The P${e.position} qualifier has been automatically selected for you:</p>
                <div class="auto-pick-driver">
                    <span class="position">P${e.position}</span>
                    <strong>${e.driverName}</strong>
                    <span class="team">${e.teamName}</span>
                </div>
                ${e.position!==15?`
                    <div class="auto-pick-note">
                        <small>Note: P15 was already selected, so P${e.position} was chosen instead.</small>
                    </div>
                `:""}
            </div>
            <div class="auto-pick-footer">
                <button id="confirm-autopick" class="confirm-btn">OK</button>
            </div>
        `,document.body.appendChild(t),document.getElementById("dismiss-autopick").addEventListener("click",()=>{t.remove()}),document.getElementById("confirm-autopick").addEventListener("click",()=>{t.remove()}),setTimeout(()=>{document.body.contains(t)&&t.remove()},1e4)}updateDriverSelectionUI(e){const t=document.querySelector(`.driver-card[data-driver-id="${e.driverId}"]`);if(t){document.querySelectorAll(".driver-card.selected").forEach(s=>{s.classList.remove("selected")}),t.classList.add("selected"),t.classList.add("auto-picked");let o=t.querySelector(".auto-pick-badge");o||(o=document.createElement("div"),o.classList.add("auto-pick-badge"),o.textContent="AUTO",t.appendChild(o)),t.setAttribute("title","This driver was automatically selected because you didn't make a pick before the deadline.")}const n=document.querySelector(".pick-status");n&&(n.textContent=`Auto-pick applied: ${e.driverName} (P${e.position})`,n.className="pick-status auto-pick-status");const a=document.getElementById("make-pick-btn");a&&(a.textContent=`AUTO-PICKED: ${e.driverName.split(" ")[1].toUpperCase()}`,a.style.backgroundColor="#666",a.disabled=!0)}loadUserPicks(){const e=localStorage.getItem("f1survivor_user_picks");return e?JSON.parse(e).picks||[]:[]}getNextRaceData(){return this.currentRaceData||this.raceData}logDebug(e,t=null){this.log("debug",e,t)}logError(e,t){this.log("error",e,t)}logWarn(e,t=null){this.log("warn",e,t)}logInfo(e){this.log("info",e)}}const v={canChangePick(i){try{const e=new w;return e.loadRaceData(),!e.initialize()}catch(e){return console.error("Error checking if pick can be changed:",e),!1}},updateMakePickButtonText(i,e){try{const t=document.getElementById("make-pick-btn");if(!t){console.warn("Make pick button not found in DOM");return}if(!i)t.textContent="MAKE YOUR PICK";else if(e){const n=i.driverName.split(" ").pop();t.textContent=`PICKED: ${n.toUpperCase()} (CHANGE)`}else{const n=i.driverName.split(" ").pop();t.textContent=`PICKED: ${n.toUpperCase()}`}}catch(t){console.error("Error updating make pick button text:",t)}},showCurrentPickInModal(i){try{const e=document.getElementById("current-pick-display"),t=document.getElementById("current-pick-name"),n=document.querySelector("#driver-selection-screen h2");if(!e||!t){console.warn("Current pick display elements not found in DOM");return}if(i){if(e.style.display="block",t.textContent=i.driverName||"Unknown Driver",n){const a=JSON.parse(localStorage.getItem("nextRaceData")),o=(a==null?void 0:a.raceName)||"Next Race";n.textContent=`Change Your Pick for ${o}`}}else if(e.style.display="none",n){const a=JSON.parse(localStorage.getItem("nextRaceData")),o=(a==null?void 0:a.raceName)||"Next Race";n.textContent=`Pick Your Driver for ${o}`}}catch(e){console.error("Error showing current pick in modal:",e)}},highlightCurrentPickInGrid(i){try{if(!i)return;const e=document.querySelector(".driver-card.current-pick");e&&e.classList.remove("current-pick");const t=document.querySelector(`[data-driver-id="${i.driverId}"]`);t&&t.classList.add("current-pick")}catch(e){console.error("Error highlighting current pick in grid:",e)}},updateConfirmButton(i){try{const e=document.getElementById("confirm-pick-btn");if(!e){console.warn("Confirm button not found in DOM");return}i?(e.textContent="Confirm Change",e.classList.add("change-mode")):(e.textContent="Confirm Pick",e.classList.remove("change-mode"))}catch(e){console.error("Error updating confirm button:",e)}}};console.log("app.js loaded - start");let P=!0;try{const i="__test__";localStorage.setItem(i,i),localStorage.removeItem(i)}catch{P=!1,console.warn("localStorage is not available. User picks will not be saved between sessions.")}const k=20,ve={name:"Monaco GP",deadline:"2025-05-25 12:00 UTC"},p=[{id:1,number:1,name:"Max Verstappen",team:"Red Bull Racing",teamColor:"#3671C6",imageUrl:"assets/images/drivers/verstappen.png",isAlreadyPicked:!1},{id:2,number:22,name:"Yuki Tsunoda",team:"Red Bull Racing",teamColor:"#3671C6",imageUrl:"assets/images/drivers/tsunoda.png",isAlreadyPicked:!1},{id:3,number:16,name:"Charles Leclerc",team:"Ferrari",teamColor:"#E80020",imageUrl:"assets/images/drivers/leclerc.png",isAlreadyPicked:!1},{id:4,number:44,name:"Lewis Hamilton",team:"Ferrari",teamColor:"#E80020",imageUrl:"assets/images/drivers/hamilton.png",isAlreadyPicked:!1},{id:5,number:63,name:"George Russell",team:"Mercedes",teamColor:"#27F4D2",imageUrl:"assets/images/drivers/russell.png",isAlreadyPicked:!1},{id:6,number:12,name:"Kimi Antonelli",team:"Mercedes",teamColor:"#27F4D2",imageUrl:"assets/images/drivers/antonelli.png",isAlreadyPicked:!1},{id:7,number:4,name:"Lando Norris",team:"McLaren",teamColor:"#FF8000",imageUrl:"assets/images/drivers/norris.png",isAlreadyPicked:!1},{id:8,number:81,name:"Oscar Piastri",team:"McLaren",teamColor:"#FF8000",imageUrl:"assets/images/drivers/piastri.png",isAlreadyPicked:!1},{id:9,number:14,name:"Fernando Alonso",team:"Aston Martin",teamColor:"#229971",imageUrl:"assets/images/drivers/alonso.png",isAlreadyPicked:!1},{id:10,number:18,name:"Lance Stroll",team:"Aston Martin",teamColor:"#229971",imageUrl:"assets/images/drivers/stroll.png",isAlreadyPicked:!1},{id:11,number:10,name:"Pierre Gasly",team:"Alpine",teamColor:"#0093CC",imageUrl:"assets/images/drivers/gasly.png",isAlreadyPicked:!1},{id:12,number:43,name:"Franco Colapinto",team:"Alpine",teamColor:"#0093CC",imageUrl:"assets/images/drivers/colapinto.png",isAlreadyPicked:!1},{id:13,number:23,name:"Alexander Albon",team:"Williams",teamColor:"#64C4FF",imageUrl:"assets/images/drivers/albon.png",isAlreadyPicked:!1},{id:14,number:55,name:"Carlos Sainz",team:"Williams",teamColor:"#64C4FF",imageUrl:"assets/images/drivers/sainz.png",isAlreadyPicked:!1},{id:15,number:6,name:"Isack Hadjar",team:"Racing Bulls",teamColor:"#6692FF",imageUrl:"assets/images/drivers/hadjar.png",isAlreadyPicked:!1},{id:16,number:30,name:"Liam Lawson",team:"Racing Bulls",teamColor:"#6692FF",imageUrl:"assets/images/drivers/lawson.png",isAlreadyPicked:!1},{id:17,number:27,name:"Nico Hulkenberg",team:"Kick Sauber",teamColor:"#52E252",imageUrl:"assets/images/drivers/hulkenberg.png",isAlreadyPicked:!1},{id:18,number:5,name:"Gabriel Bortoleto",team:"Kick Sauber",teamColor:"#52E252",imageUrl:"assets/images/drivers/bortoleto.png",isAlreadyPicked:!1},{id:19,number:31,name:"Esteban Ocon",team:"Haas F1 Team",teamColor:"#B6BABD",imageUrl:"assets/images/drivers/ocon.png",isAlreadyPicked:!1},{id:20,number:87,name:"Oliver Bearman",team:"Haas F1 Team",teamColor:"#B6BABD",imageUrl:"assets/images/drivers/bearman.png",isAlreadyPicked:!1}];let K=[],S=null,O,M,I,N,g,_;function V(){O.classList.add("active"),N.disabled=!0}function Y(){O.classList.remove("active"),N.disabled=!1}function b(i){M.textContent=i,M.classList.add("active")}function x(){M.classList.remove("active")}let y,$,G,B,H,q,F;function ke(i){if(console.log("Showing confirmation modal for driver:",i),!y){console.error("Confirmation modal element not found!");return}const e=h(),t=!!e;$.src=i.imageUrl,$.alt=i.name,G.textContent=i.name,B.textContent=i.team,B.style.color=i.teamColor,H.textContent=i.number;const n=y.querySelector("h3"),a=y.querySelector(".confirmation-warning p");t&&n?n.textContent="Confirm Pick Change":n&&(n.textContent="Confirm Your Pick"),t&&a&&e?a.innerHTML=`<strong>Note:</strong> You are changing from ${e.driverName} to ${i.name}. You can continue to change your pick until 1 hour before the race.`:a&&(a.innerHTML="<strong>Remember:</strong> Once confirmed, you cannot pick this driver again this season."),y.style.setProperty("--accent-color",i.teamColor),y.classList.add("active"),console.log("Added active class to modal"),document.addEventListener("keydown",j),anime({targets:".confirmation-modal-content",scale:[.9,1],opacity:[0,1],duration:400,easing:"easeOutElastic(1, .8)"}),anime({targets:"#confirmation-driver-image",translateY:[20,0],opacity:[0,1],delay:200,duration:500,easing:"easeOutQuad"})}function A(){y&&(y.classList.remove("active"),document.removeEventListener("keydown",j))}function j(i){i.key==="Escape"&&A()}function Se(){console.log("Initializing confirmation modal..."),y=document.getElementById("confirmation-modal"),$=document.getElementById("confirmation-driver-image"),G=document.getElementById("confirmation-driver-name"),B=document.getElementById("confirmation-driver-team"),H=document.getElementById("confirmation-driver-number"),q=document.getElementById("final-confirm-btn"),F=document.getElementById("cancel-pick-btn");const i=document.getElementById("close-confirmation-modal-btn");if(console.log("Modal elements found:",{modal:!!y,image:!!$,name:!!G,team:!!B,number:!!H,confirmBtn:!!q,cancelBtn:!!F,closeBtn:!!i}),!y){console.error("Confirmation modal not found in DOM");return}i.addEventListener("click",A),F.addEventListener("click",A),q.addEventListener("click",async()=>{console.log("Final confirm button clicked");const e=p.find(t=>t.id===S);if(!e){console.error("Selected driver not found"),b("Invalid driver selection. Please try again.");return}try{A(),V(),x();const t=JSON.parse(localStorage.getItem("nextRaceData"));if(!t||!t.raceId)throw new Error("Race data not initialized. Please refresh the page.");if(P){const n={driverName:e.name,teamName:e.team,isAutoPick:!1},a=await ge(S,n);if(!a)throw new Error("Failed to save pick. Please try again.");console.log("Successfully saved pick:",a)}try{const a=!new w().isDeadlinePassed(),o=h();v.updateMakePickButtonText(o,a)}catch(n){console.warn("Deadline manager failed during pick confirmation, using fallback:",n);const a=h();a&&v.updateMakePickButtonText(a,!0)}_.style.display="none",anime({targets:g,scale:[1.1,1],duration:400,easing:"easeOutElastic(1, .8)"})}catch(t){console.error("Failed to submit pick:",t),b(t.message||"Failed to submit your pick. Please try again."),A()}finally{Y()}}),console.log("Confirmation modal initialized successfully")}async function De(){try{V(),x(),I.innerHTML="";for(let e=0;e<k;e++){const t=document.createElement("div");t.className="driver-card skeleton",t.innerHTML=`
                <div class="img"></div>
                <div class="driver-name"></div>
                <div class="driver-team"></div>
            `,I.appendChild(t)}if(await new Promise(e=>setTimeout(e,1e3)),I.innerHTML="",p.forEach(e=>{e.isAlreadyPicked=!1}),P)try{const e=U();console.log("Loaded picks for grid:",e),Array.isArray(e)?p.forEach(t=>{const n=e.some(a=>(typeof a=="object"?a.driverId:a)===t.id);t.isAlreadyPicked=n,console.log(`Driver ${t.name} (${t.id}) picked status:`,n)}):console.error("Picks is not an array:",e)}catch(e){console.error("Error loading picks:",e)}console.log("Rendering grid with drivers:",p.map(e=>({name:e.name,id:e.id,isAlreadyPicked:e.isAlreadyPicked}))),p.forEach(e=>{const t=document.createElement("div");t.className=`driver-card${e.isAlreadyPicked?" picked":""}`,t.dataset.driverId=e.id;const a=(o=>{const s=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(o);return s?{r:parseInt(s[1],16),g:parseInt(s[2],16),b:parseInt(s[3],16)}:null})(e.teamColor);if(a&&(t.style.setProperty("--team-color",e.teamColor),t.style.setProperty("--team-color-alpha",`rgba(${a.r}, ${a.g}, ${a.b}, 0.3)`)),t.innerHTML=`
                <img src="${e.imageUrl}" alt="${e.name}" onerror="this.src='assets/images/drivers/default.svg'">
                <div class="driver-name">${e.name}</div>
                <div class="driver-team" style="color: ${e.teamColor}">${e.team}</div>
                ${e.isAlreadyPicked?'<div class="tooltip">Already picked in a previous race</div>':""}
            `,e.isAlreadyPicked){const o=t.querySelector(".tooltip");o&&t.addEventListener("mouseenter",()=>{const s=t.getBoundingClientRect(),r=o.getBoundingClientRect(),l=s.top-r.height-10,d=s.left+(s.width-r.width)/2,c=window.innerWidth,u=Math.max(10,Math.min(d,c-r.width-10)),f=Math.max(10,l);o.style.top=`${f}px`,o.style.left=`${u}px`})}I.appendChild(t)});const i=h();v.highlightCurrentPickInGrid(i)}catch(i){console.error("Error rendering driver grid:",i),b("Failed to load drivers. Please try again.")}finally{Y()}}const Ie=()=>{console.log("Initializing driver selection..."),g=document.getElementById("make-pick-btn"),_=document.getElementById("driver-selection-screen");const i=document.getElementById("close-selection-btn");N=document.getElementById("confirm-pick-btn"),O=document.getElementById("loading-overlay"),M=document.getElementById("error-message"),I=document.getElementById("driver-grid");const t=Object.entries({makePickBtn:g,driverSelectionScreen:_,closeSelectionBtn:i,confirmPickBtn:N,loadingOverlay:O,errorMessage:M,driverGrid:I}).filter(([s,r])=>!r).map(([s])=>s);if(t.length>0)throw new Error(`Missing required elements in initializeDriverSelection: ${t.join(", ")}`);Se();const n=new ye;if(n.debug=!0,n.qualifyingManager.debug=!0,n.initialize(),new w().initialize({onDeadlineApproaching:s=>{const r=document.createElement("div");r.id="deadline-message";const l=s.hours===0&&s.minutes<60;r.className=`deadline-status deadline-warning${l?" urgent-pulse":""}`,r.textContent=`Selection closes in: ${s.hours}h ${s.minutes}m ${s.seconds}s`,h()&&s.totalMinutes<60&&s.totalMinutes===59&&s.seconds===59&&console.log("Warning user about pick change deadline approaching");const c=document.getElementById("deadline-message"),u=document.querySelector(".driver-selection-content"),f=document.querySelector(".driver-grid");c?(s.seconds===59&&console.log("Replacing existing status element"),c.replaceWith(r)):u&&f&&(console.log("Inserting new status element"),u.insertBefore(r,f));const m=document.querySelector(".race-countdown-container .pick-status");m&&(m.className=`pick-status${l?" urgent-pulse":""}`,m.textContent="Pick deadline approaching!")},onDeadlinePassed:()=>{console.log("Deadline passed callback triggered");const s=document.querySelector(".race-countdown-container .pick-status");if(s&&(s.className="pick-status deadline-passed",s.textContent="Selection locked: Deadline has passed"),g){g.disabled=!0,g.style.opacity="0.5",g.style.cursor="not-allowed";const c=h();if(c){const u=c.driverName.split(" ").pop();g.textContent=`PICKED: ${u.toUpperCase()}`}}const r=JSON.parse(localStorage.getItem("nextRaceData")),l=U();console.log("Checking for existing pick:",{raceData:r,userPicks:l});const d=l.find(c=>c.raceId===(r==null?void 0:r.raceId));if(console.log("Existing pick found:",d),r&&!d){console.log("No pick made before deadline, triggering auto-pick");const c=new CustomEvent("triggerAutoPick",{detail:{raceId:r.raceId,timestamp:new Date().toISOString()}});console.log("Dispatching auto-pick event:",c),window.dispatchEvent(c)}else console.log("Pick already exists or no race data available")}})){console.log("Deadline is passed, disabling button"),g.disabled=!0,g.style.opacity="0.5",g.style.cursor="not-allowed";const s=h();if(s){const l=s.driverName.split(" ").pop();g.textContent=`PICKED: ${l.toUpperCase()}`}const r=document.querySelector(".race-countdown-container .pick-status");r&&(r.className="pick-status deadline-passed",r.textContent="Selection locked: Deadline has passed")}if(window.mockDrivers=p,window.userPicks=K,P)try{const s=U();if(s&&s.length>0){s.forEach(l=>{const d=p.find(c=>c.id===l.driverId);d&&(d.isAlreadyPicked=!0)});const r=h();if(r)try{const l=new w;l.loadRaceData();const d=!l.isDeadlinePassed();v.updateMakePickButtonText(r,d)}catch(l){console.warn("Deadline manager failed, using fallback for button text:",l),v.updateMakePickButtonText(r,!0)}console.log("Loaded user picks from localStorage:",s)}}catch(s){console.error("Failed to load picks from localStorage:",s)}g.addEventListener("click",async()=>{if(console.log("Make pick button clicked"),g.disabled){console.log("Button is disabled, ignoring click");return}if(!await T.isAuthenticated()){console.log("User not authenticated, showing auth modal"),sessionStorage.setItem("redirectAfterAuth",window.location.href),await Q.showModal("signin");return}const r=h(),l=!!r;console.log("Current pick:",r),console.log("Is changing:",l),S=null,_.style.display="flex",v.showCurrentPickInModal(r),v.updateConfirmButton(l),De()}),i.addEventListener("click",()=>{console.log("Close button clicked"),_.style.display="none",x()}),I.addEventListener("click",s=>{const r=s.target.closest(".driver-card");if(!r||r.classList.contains("skeleton"))return;const l=parseInt(r.dataset.driverId),d=p.find(f=>f.id===l),c=h();if(c&&c.driverId===l){r.classList.add("selected"),S=l,x();return}if(d.isAlreadyPicked){b("You have already picked this driver in a previous race!");return}const u=document.querySelector(".driver-card.selected");u&&u.classList.remove("selected"),r.classList.add("selected"),S=l,x()}),N.addEventListener("click",async()=>{if(!S){b("Please select a driver first!");return}const s=p.find(r=>r.id===S);if(!s){b("Invalid driver selection!");return}if(P&&me(S)){b("You have already picked this driver in a previous race!");return}ke(s)}),console.log("Driver selection initialized successfully")};function be(i){const e=new Date(i);return new Intl.DateTimeFormat(navigator.language,{weekday:"short",month:"short",day:"numeric",hour:"numeric",minute:"numeric",timeZoneName:"short"}).format(e)}function we(i){try{if(i&&i.pickDeadline){const t=be(i.pickDeadline),n=document.getElementById("selection-deadline");n&&(n.textContent=`Selection deadline: ${t}`);const a=document.querySelector("#driver-selection-screen .deadline");a&&(a.textContent=`Selection deadline: ${t}`)}const e=document.getElementById("current-gp-name");e&&i&&(e.textContent=i.raceName||ve.name)}catch(e){console.error("Error updating GP info:",e)}}async function Re(){try{const i=document.getElementById("race-countdown-container"),e=document.getElementById("make-pick-btn"),t=document.getElementById("driver-selection-screen"),n=document.getElementById("close-selection-btn"),a=document.getElementById("confirm-pick-btn"),o=document.getElementById("loading-overlay"),s=document.getElementById("error-message"),r=document.getElementById("driver-grid"),d=Object.entries({countdownContainer:i,makePickBtn:e,driverSelectionScreen:t,closeSelectionBtn:n,confirmPickBtn:a,loadingOverlay:o,errorMessage:s,driverGrid:r}).filter(([m,C])=>!C).map(([m])=>m);if(d.length>0)throw new Error(`Missing required elements: ${d.join(", ")}`);await new ce(i).initialize(),console.log("Race countdown timer initialized");const u=JSON.parse(localStorage.getItem("nextRaceData"));if(!u||!u.raceId)throw new Error("Race data initialization failed");we(u),Ie();const f=h();if(f)try{const m=new w;m.loadRaceData();const C=!m.isDeadlinePassed();v.updateMakePickButtonText(f,C)}catch(m){console.warn("Deadline manager failed, using fallback for button text:",m),v.updateMakePickButtonText(f,!0)}z(),Pe()}catch(i){console.error("App initialization failed:",i);const e=document.createElement("div");e.className="error-message active",e.textContent="Failed to initialize app. Please refresh the page.",document.body.prepend(e)}}async function Pe(){try{console.log("Initializing authentication state management"),T.onAuthStateChange(e=>{W(e)});const i=await T.isAuthenticated();W(i),console.log("Authentication state management initialized")}catch(i){console.error("Failed to initialize authentication state:",i)}}async function W(i){var a;console.log("Updating UI for auth state:",i);const e=document.querySelectorAll(".sign-in"),t=document.querySelectorAll(".nav-link"),n=document.getElementById("make-pick-btn");if(i)try{const o=await T.getCurrentUser(),s=((a=o==null?void 0:o.signInDetails)==null?void 0:a.loginId)||(o==null?void 0:o.username)||"User";e.forEach(r=>{r.textContent=s.split("@")[0],r.onclick=l=>{l.preventDefault(),l.stopPropagation(),J()},r.classList.add("authenticated")}),t.forEach(r=>{r.style.display="block"}),n&&(n.style.display="block"),Z(),console.log("UI updated for authenticated user:",s)}catch(o){console.error("Error getting user info:",o),e.forEach(s=>{s.textContent="User",s.onclick=r=>{r.preventDefault(),r.stopPropagation(),J()},s.classList.add("authenticated")}),t.forEach(s=>{s.style.display="block"}),n&&(n.style.display="block")}else e.forEach(o=>{o.textContent="Sign In",o.onclick=()=>showAuthModal("signin"),o.classList.remove("authenticated")}),t.forEach(o=>{o.style.display="none"}),n&&(n.style.display="none"),Ce(),console.log("UI updated for unauthenticated user")}function J(){document.querySelectorAll(".user-menu").forEach(n=>n.remove());const e=document.createElement("div");e.className="user-menu",e.innerHTML=`
        <div class="user-menu-content">
            <button onclick="handleSignOut()" style="
                background: #ffffff;
                border: 2px solid #dc2626;
                color: #dc2626;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
                font-weight: 600;
                width: 100%;
                transition: all 0.2s ease;
            " 
            onmouseover="this.style.background='#dc2626'; this.style.color='#ffffff'" 
            onmouseout="this.style.background='#ffffff'; this.style.color='#dc2626'">
                Sign Out
            </button>
        </div>
    `;const t=document.querySelector(".sign-in");if(t){const n=t.getBoundingClientRect();e.style.position="fixed",e.style.top=`${n.bottom+5}px`,e.style.right="20px",e.style.zIndex="9999",e.style.background="#ffffff",e.style.border="2px solid #374151",e.style.borderRadius="6px",e.style.padding="0.5rem",e.style.boxShadow="0 4px 12px rgba(0, 0, 0, 0.15)"}document.body.appendChild(e),setTimeout(()=>{document.addEventListener("click",function n(a){e.contains(a.target)||(e.remove(),document.removeEventListener("click",n))})},100)}async function Ee(){try{console.log("Signing out user");const i=await T.signOut();i.success?(console.log("Sign out successful"),document.querySelectorAll(".user-menu").forEach(t=>t.remove()),W(!1),window.location.pathname.includes("dashboard")&&(window.location.href="index.html")):console.error("Sign out failed:",i.error)}catch(i){console.error("Sign out error:",i)}}function Ce(){Z();const i=document.getElementById("main-action-area");if(i){const e=document.createElement("div");e.id="unauthenticated-cta",e.className="unauthenticated-message",e.innerHTML=`
            <div class="auth-cta-content">
                <h3>🏁 Ready to Play F1 Survivor?</h3>
                <p>Sign up to start picking drivers and compete with other F1 fans!</p>
                <button class="cta-button" onclick="showAuthModal('signup')">
                    Join the Game
                </button>
                <p class="sign-in-text">Already have an account? 
                    <a href="#" onclick="showAuthModal('signin')" class="sign-in-link">Sign In</a>
                </p>
            </div>
        `,i.innerHTML="",i.appendChild(e)}}function Z(){const i=document.getElementById("unauthenticated-cta");i&&i.remove();const e=document.getElementById("main-action-area");if(e&&!document.getElementById("make-pick-btn")){e.innerHTML=`
            <button class="cta-button" id="make-pick-btn">MAKE YOUR PICK</button>
        `;const t=document.getElementById("make-pick-btn");t&&t.replaceWith(t.cloneNode(!0))}}document.addEventListener("DOMContentLoaded",()=>{const i=document.getElementById("nav-pick-btn"),e=document.getElementById("make-pick-btn");i&&e&&i.addEventListener("click",t=>{t.preventDefault(),e.click()})});window.showAuthModal=async(i="signin")=>{await Q.showModal(i)};window.handleSignOut=Ee;document.addEventListener("DOMContentLoaded",()=>{console.log("DOM fully loaded, starting app initialization"),Re().catch(i=>{console.error("App initialization failed:",i);const e=document.createElement("div");e.className="error-message active",e.textContent="Failed to initialize app. Please refresh the page.",document.body.prepend(e)})});function _e(){confirm("Are you sure you want to clear all your pick data? This cannot be undone.")&&(P&&oe(),K=[],p.forEach(i=>{i.isAlreadyPicked=!1}),alert("All pick data has been cleared."),window.location.reload())}function Ae(i){const e=p.find(t=>t.name===i);return e?console.log(`Driver state for ${i}:`,{id:e.id,isAlreadyPicked:e.isAlreadyPicked,team:e.team,number:e.number}):console.log(`Driver ${i} not found`),e}function Ne(){confirm("Add test data for previous race picks?")&&(re()?(alert("Test data added. Max Verstappen and Lando Norris were picked in previous races."),window.location.reload()):alert("Failed to add test data. Check console for errors."))}window.clearAllPicksData=_e;window.checkDriverState=Ae;window.simulatePreviousRacePicks=Ne;try{let i=function(){const o=Array.from(document.querySelector(".lights-row.row1").querySelectorAll(".light")),s=Array.from(document.querySelector(".lights-row.row2").querySelectorAll(".light")),r=[...o,...s];r.forEach(d=>{d.classList.remove("on"),anime.set(d,{scale:1,opacity:1})});const l=anime.timeline({easing:"easeInOutQuad"});for(let d=0;d<5;d++)l.add({targets:[o[d],s[d]],scale:[{value:.8,duration:100},{value:1.2,duration:300},{value:1,duration:200}],begin:function(c){o[d].classList.add("on"),s[d].classList.add("on")}},d*800);l.add({targets:r,scale:[1,.8],opacity:.5,duration:300,delay:anime.stagger(50),begin:function(){r.forEach(d=>d.classList.remove("on"))}},"+=2000"),l.finished.then(()=>{setTimeout(i,3e3)})};setTimeout(i,2e3);const e=document.querySelector(".grid-background");if(e){for(let o=0;o<k*k;o++){const s=document.createElement("div");s.className="grid-dot",s.style.width="2px",s.style.height="2px",s.style.background="var(--grid-color)",s.style.borderRadius="50%",e.appendChild(s)}document.addEventListener("mousemove",o=>{const s=e.getBoundingClientRect(),r=o.clientX-s.left,l=o.clientY-s.top;anime({targets:".grid-dot",scale:[{value:1},{value:1.5},{value:1}],duration:900,easing:"easeOutElastic(1, .5)",delay:anime.stagger(100,{grid:[k,k],from:Math.floor(l/(s.height/k))*k+Math.floor(r/(s.width/k))})})})}document.querySelectorAll(".animate-text").length>0&&anime.timeline({easing:"easeOutExpo"}).add({targets:".title span",opacity:[0,1],translateY:[20,0],duration:1200,delay:anime.stagger(200)}).add({targets:".description p",opacity:[0,1],translateY:[20,0],duration:800,delay:anime.stagger(100)},"-=800");const n=document.querySelector(".cta-button");n&&(n.addEventListener("mouseenter",()=>{anime({targets:n,scale:1.05,duration:300,easing:"easeOutElastic(1, .5)"})}),n.addEventListener("mouseleave",()=>{anime({targets:n,scale:1,duration:300,easing:"easeOutElastic(1, .5)"})}));const a=document.querySelector(".motion-path");if(a){const o=anime.setDashoffset(a);anime({targets:".motion-path",strokeDasharray:o,strokeDashoffset:[o,0],duration:3e3,easing:"easeInOutQuad",complete:function(){a.style.strokeDasharray="none"}});const s=anime.path(".motion-path");anime({targets:".car-dot",translateX:s("x"),translateY:s("y"),rotate:s("angle"),easing:"linear",duration:8e3,loop:!0}),anime({targets:".motion-path",strokeDashoffset:[anime.setDashoffset,0],easing:"linear",duration:4e3,loop:!0,direction:"alternate"})}}catch(i){console.error("Error in anime.js animations:",i)}window.testDeadlineManager=async()=>{const i=new w({debug:!1});i.initialize(),localStorage.removeItem("nextRaceData"),i.loadRaceData();const e=new Date(Date.now()+3e4);localStorage.setItem("nextRaceData",JSON.stringify({raceId:"test-race",pickDeadline:e.toISOString()})),i.initialize(),localStorage.setItem("nextRaceData",JSON.stringify({raceId:"test-race"})),i.loadRaceData()};console.log("app.js loaded - end");
